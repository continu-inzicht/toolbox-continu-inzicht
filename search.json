[
  {
    "objectID": "tests.html",
    "href": "tests.html",
    "title": "Testprotocol",
    "section": "",
    "text": "Elk ontwikkeld script wordt getest. Hiervoor is een testprotocol opgesteld (link naar document volgt). Dit testprotocol bestaat o.a. uit een unit test en integratietesten. Met unittesten testen we of de individuele componenten van de broncode goed werken (bijv. bij foutieve data). Integratietesten voeren we uit om de samenwerking tussen de verschillende scripts te controleren.\nVoor het testen gebruiken we de webviewer van de Toolbox Continu Inzicht en de standaard PostGreSQL database.",
    "crumbs": [
      "Achtergrond",
      "Testprotocol"
    ]
  },
  {
    "objectID": "reference/README.html",
    "href": "reference/README.html",
    "title": "LET OP: Een deel van deze paginas wordt automatisch gegenereed",
    "section": "",
    "text": "LET OP: Een deel van deze paginas wordt automatisch gegenereed\nPas dus de bron aan, niet deze bestanden."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Toolbox voor continu inzicht\n\n\n\nbase.config\n\n\n\nbase.data_adapter\n\n\n\nproof_of_concept.voorbeeld_module\n\n\n\nfragility_curves.calculate_fragility_curves",
    "crumbs": [
      "Python documentatie",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#continu-inzicht-toolbox",
    "href": "reference/index.html#continu-inzicht-toolbox",
    "title": "API Reference",
    "section": "",
    "text": "Toolbox voor continu inzicht\n\n\n\nbase.config\n\n\n\nbase.data_adapter\n\n\n\nproof_of_concept.voorbeeld_module\n\n\n\nfragility_curves.calculate_fragility_curves",
    "crumbs": [
      "Python documentatie",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/voorbeeld_module.html",
    "href": "reference/voorbeeld_module.html",
    "title": "voorbeeld_module",
    "section": "",
    "text": "voorbeeld_module\nvoorbeeld_module"
  },
  {
    "objectID": "reference/base.data_adapter.html",
    "href": "reference/base.data_adapter.html",
    "title": "base.data_adapter",
    "section": "",
    "text": "base.data_adapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nDataAdapter\nBasis DataAdapter\n\n\n\n\n\nbase.data_adapter.DataAdapter()\nBasis DataAdapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig\n\n\n\ninput_types\n\n\n\noutput_types\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ninitialize_input_types\n\n\n\ninitialize_output_types\n\n\n\ninput\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput_csv\nLaat een csv bestand in gegeven een pad\n\n\ninput_netcdf\nLaat een netcdf bestand in gegeven een pad\n\n\ninput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\noutput\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput_csv\nschrijft een csv bestand in gegeven een pad\n\n\noutput_netcdf\nschrijft een netCDF bestand in gegeven een pad\n\n\noutput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\n\n\n\nbase.data_adapter.DataAdapter.initialize_input_types()\n\n\n\nbase.data_adapter.DataAdapter.initialize_output_types()\n\n\n\nbase.data_adapter.DataAdapter.input(input)\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput: str Naam van de data adapter die gebruikt wordt.\nopties: dict extra informatie die ook naar de functie moet om het bestand te lezen\n\n\n\n\nbase.data_adapter.DataAdapter.input_csv(input_config)\nLaat een csv bestand in gegeven een pad\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_netcdf(input_config)\nLaat een netcdf bestand in gegeven een pad\n\n\nLees het netCDF bestand met xarray in en converteer de dataset naar een pandas dataframe.\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_postgresql(input_config)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ninput_config: dict in\n\n\n\nIn de .env environment bestand moet staan: user: str password: str host: str port: str database: str schema: str\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.output(output, df)\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput: name of the data adapter to use df: pd.Dataframe pandas dataframe om weg te schrijven\nopties: dict extra informatie die ook naar de functie moet om het bestand te schrijven\n\n\n\n\nbase.data_adapter.DataAdapter.output_csv(output_config, df)\nschrijft een csv bestand in gegeven een pad\n\n\nGebruikt hiervoor de pandas.DataFrame.to_csv Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_netcdf(output_config, df)\nschrijft een netCDF bestand in gegeven een pad\n\n\nGebruikt hiervoor eerst de xarray.from_dataframe om een xarray dataset te maken vervolgens xarray to_netcdf om het bestand te genereren. Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_postgresql(output_config, df)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ndf: pd.Dataframe dataframe met data om weg te schrijven opties: dict dictionary met extra opties waar onder: schema: str naam van het schema in de postgresql database table: str naam van de tabel in de postgresql database\n\n\n\nIn het credential bestand moet staan: user: str password: str host: str port: str database: str\n\n\n\nNone"
  },
  {
    "objectID": "reference/base.data_adapter.html#classes",
    "href": "reference/base.data_adapter.html#classes",
    "title": "base.data_adapter",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nDataAdapter\nBasis DataAdapter\n\n\n\n\n\nbase.data_adapter.DataAdapter()\nBasis DataAdapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig\n\n\n\ninput_types\n\n\n\noutput_types\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ninitialize_input_types\n\n\n\ninitialize_output_types\n\n\n\ninput\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput_csv\nLaat een csv bestand in gegeven een pad\n\n\ninput_netcdf\nLaat een netcdf bestand in gegeven een pad\n\n\ninput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\noutput\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput_csv\nschrijft een csv bestand in gegeven een pad\n\n\noutput_netcdf\nschrijft een netCDF bestand in gegeven een pad\n\n\noutput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\n\n\n\nbase.data_adapter.DataAdapter.initialize_input_types()\n\n\n\nbase.data_adapter.DataAdapter.initialize_output_types()\n\n\n\nbase.data_adapter.DataAdapter.input(input)\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput: str Naam van de data adapter die gebruikt wordt.\nopties: dict extra informatie die ook naar de functie moet om het bestand te lezen\n\n\n\n\nbase.data_adapter.DataAdapter.input_csv(input_config)\nLaat een csv bestand in gegeven een pad\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_netcdf(input_config)\nLaat een netcdf bestand in gegeven een pad\n\n\nLees het netCDF bestand met xarray in en converteer de dataset naar een pandas dataframe.\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_postgresql(input_config)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ninput_config: dict in\n\n\n\nIn de .env environment bestand moet staan: user: str password: str host: str port: str database: str schema: str\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.output(output, df)\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput: name of the data adapter to use df: pd.Dataframe pandas dataframe om weg te schrijven\nopties: dict extra informatie die ook naar de functie moet om het bestand te schrijven\n\n\n\n\nbase.data_adapter.DataAdapter.output_csv(output_config, df)\nschrijft een csv bestand in gegeven een pad\n\n\nGebruikt hiervoor de pandas.DataFrame.to_csv Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_netcdf(output_config, df)\nschrijft een netCDF bestand in gegeven een pad\n\n\nGebruikt hiervoor eerst de xarray.from_dataframe om een xarray dataset te maken vervolgens xarray to_netcdf om het bestand te genereren. Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_postgresql(output_config, df)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ndf: pd.Dataframe dataframe met data om weg te schrijven opties: dict dictionary met extra opties waar onder: schema: str naam van het schema in de postgresql database table: str naam van de tabel in de postgresql database\n\n\n\nIn het credential bestand moet staan: user: str password: str host: str port: str database: str\n\n\n\nNone"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Toolbox continu inzicht",
    "section": "",
    "text": "Waterkeringbeheerders zijn gewend om hun waterkeringen te laten voldoen aan vastgestelde normen: daar baseren ze het ontwerp en hun beheer en onderhoud op. In een situatie met extreme droogte of extreem hoge waterstanden is er meer nodig. Dan is het belangrijk continu inzicht te hebben in de actuele risico’s voor het gebied in de eerstvolgende dagen. De methode ‘continu inzicht’ is precies daarop gericht: ervoor zorgen dat de beheerder 24/7 in control is. Met slimme monitoring en rekenmodellen wordt de actuele situatie geanalyseerd. De beheerder ziet hoe groot het risico is en waar de zwakke plekken zitten, zodat hij of zij gericht maatregelen kan nemen. De ‘Toolbox continu inzicht’ is door HKV lijn in water ontwikkeld voor waterschappen en Rijkswaterstaat. Doormiddel van deze python toolbox worden de systemen achter ‘continu inzicht’ her ontwikkeld in python en open source aangeboden.",
    "crumbs": [
      "Achtergrond",
      "Toolbox continu inzicht"
    ]
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html",
    "href": "examples/notebooks/proof_of_concept.html",
    "title": "Architectuur voorbeeld",
    "section": "",
    "text": "Om de architectuur weer te geven wordt een simple voorbeeld gegeven door een reeks keer twee en gedeelddoor te doen.\nDe opbouw van de code is hier onder weergegeven:\nEen voorbeeld senario is het inladen van CSV en wegschrijven naar csv:\nAan de voorkant ziet dat er zo uit:",
    "crumbs": [
      "Voorbeelden",
      "Architectuur voorbeeld"
    ]
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "href": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "title": "Architectuur voorbeeld",
    "section": "Voorbeeld met CSV",
    "text": "Voorbeeld met CSV\nLees de configuratie in:\nDit leest een configuratie bestand test_config.yaml in:\nGlobalVariables:\n    rootdir: 'data_sets'\n    postgresql_database:\n        database: 'citoolbox'\n        schema: 'citoolbox_schema'\n\nDataAdapter:\n    MyCSV_in: \n        type: csv\n        path: 'test_csv_in.csv'\n    MyCSV_out: \n        type: csv\n        path: 'test_csv_out.csv'\n    MyPostgresql: \n        type: postgresql_database\n        table: data\n\n...\n\ntest_data_sets_path = Path.cwd() / \"data_sets\"\nc = Config(config_path=test_data_sets_path / \"test_config.yaml\")\nc.lees_config()\n\nZet de data adapter klaar en geef deze de configuratie mee\n\nfrom toolbox_continu_inzicht import DataAdapter\n\ndata = DataAdapter(config=c)\n\nRun de module met CSV\n\nfrom toolbox_continu_inzicht import voorbeeld_module\n\nkeer_twee = voorbeeld_module.WaardesKeerTwee(\n    data_adapter=data, input=\"MyCSV_in\", output=\"MyCSV_out\"\n)\n\n\nkeer_twee.run()\n\n\nkeer_twee.df_in\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndatetime\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n4.8\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n5.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n5.2\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n5.4\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n5.6\n\n\n\n\n\n\n\n\nkeer_twee.df_out\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndatetime\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n9.6\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n10.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n10.4\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n10.8\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n11.2\n\n\n\n\n\n\n\nde values waardes uit de vorige table zijn vermenigvuldigd met twee",
    "crumbs": [
      "Voorbeelden",
      "Architectuur voorbeeld"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Alle noemenswaardige veranderingen worden hier bijgehouden. Dit project gebruikt Semantic Versioning. Het format is beschreven op keepachangelog.com.\n\n\n\n\n\nWerkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19",
    "crumbs": [
      "Achtergrond",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#ongeplubliceerd",
    "href": "changelog.html#ongeplubliceerd",
    "title": "Changelog",
    "section": "",
    "text": "Werkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19",
    "crumbs": [
      "Achtergrond",
      "Changelog"
    ]
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "De Toolbox Continu Inzicht wordt incrementeel ontwikkeld. De IT-ontwikkeling is opgedeeld in sprintblokken. Binnen elk sprintblok worden één of meerdere modules ontwikkeld. Voor elke module worden Python-scripts ontwikkeld waarmee een functie kan worden uitgevoerd. Een voorbeeld van een functie is het uitlezen van waterstanden uit FEWS. De scripts en de code (inclusief documentatie) worden na het afronden van iedere sprint gepubliceerd op deze Wikipagina en een publieke Github. De scripts worden vrijgegeven nadat deze succesvol het testprotocol hebben doorlopen.\nDe ontwikkeling van de volgende modules is voorzien:",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-architectuur",
    "href": "modules.html#sec-architectuur",
    "title": "Modules",
    "section": "Basis architectuur Toolbox Continu Inzicht",
    "text": "Basis architectuur Toolbox Continu Inzicht\nDe architectuur van de toolbox continu inzicht is ontworpen om flexibel te zijn.\n\nConfiguratie\nPer systeem kunnen de wensen van de gebruiker veranderen, het systeem is dan ook te configureren voor verschillende data bronnen.\n\n\nData adapter\nDe data adapter wordt gebruikt om verschillende data types in en uit te lezen. Op het moment zijn dit de volgende data formaten:\n\nCSV\nNetCDF\nPostgreSQL",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-belastingen",
    "href": "modules.html#sec-belastingen",
    "title": "Modules",
    "section": "Belastingen inlezen en classificeren",
    "text": "Belastingen inlezen en classificeren\nDit maakt deel uit van sprint 2, deze tekst zal na uitvoering van de sprint worden aangevuld.",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Het ontwikkelen van de toolbox continu inzicht bestaat uit twee delen. Eerst ontwikkeld HKV de basisfunctionaliteit. Deze ontwikkeling is voor iedereen te volgen op GitHub, maar toevoegingen worden nog niet geaccepteerd. Daarna blijft het project open source beschikbaar en kan het verder worden ontwikkeld. De term ‘ontwikkelaars’ duidt in de eerste ontwikkelfase op het team van HKV, later op anderen die een bijdrage willen leveren. Een bijdragen kan uiteenlopen van een vraag tot een grote wijziging via een pull request.\nEen bijdrage kan een van de volgend dingen zijn:\n\nJe hebt een vraag\nJe denkt een probleem (bug) te hebben gevonden (of onverwachte functionaliteit)\nJe wilt een aanpassing maken (Bug fixen, nieuwe functionaliteit, update aan de documentatie)\nJe wilt een nieuwe versie publiceren\n\nDe onderstaande secties behandelen de stappen per geval.\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg de \"Question” label toe; voeg andere labels toe waar nodig.\n\n\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.\n\n\n\n\n\n(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeld configuratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor andere.\npush je branch. naar (jou fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests worden ontvangen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je test schrijft of runt, of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.\n\n\n\nDit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht voor all actie, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versie tag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de Github actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-hebt-een-vraag",
    "href": "contributing.html#je-hebt-een-vraag",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg de \"Question” label toe; voeg andere labels toe waar nodig.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "href": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-aanpassing-maken",
    "href": "contributing.html#je-wilt-een-aanpassing-maken",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeld configuratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor andere.\npush je branch. naar (jou fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests worden ontvangen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je test schrijft of runt, of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "href": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Dit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht voor all actie, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versie tag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de Github actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Instalatie instructies",
    "section": "",
    "text": "De toolbox continu inzicht kan op verschillende manieren worden gebruikt: 1. Als vervanging van de huidige Continu Inzicht back-end 1. Als los staande modules 1. Als ontwikkelaar\n\n\nOm de toolbox als vervanging van de huidige Continu Inzicht back-end zal in de toekomst meer informatie beschikbaar gesteld worden. De oude backend kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen kunnen dan worden mee genomen.\n\n\n\nOm de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht\n\n\n\nZie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Achtergrond",
      "Instalatie instructies"
    ]
  },
  {
    "objectID": "install.html#vervanging",
    "href": "install.html#vervanging",
    "title": "Instalatie instructies",
    "section": "",
    "text": "Om de toolbox als vervanging van de huidige Continu Inzicht back-end zal in de toekomst meer informatie beschikbaar gesteld worden. De oude backend kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen kunnen dan worden mee genomen.",
    "crumbs": [
      "Achtergrond",
      "Instalatie instructies"
    ]
  },
  {
    "objectID": "install.html#los-staande-modules",
    "href": "install.html#los-staande-modules",
    "title": "Instalatie instructies",
    "section": "",
    "text": "Om de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht",
    "crumbs": [
      "Achtergrond",
      "Instalatie instructies"
    ]
  },
  {
    "objectID": "install.html#als-ontwikkelaar",
    "href": "install.html#als-ontwikkelaar",
    "title": "Instalatie instructies",
    "section": "",
    "text": "Zie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Achtergrond",
      "Instalatie instructies"
    ]
  },
  {
    "objectID": "reference/base.config.html",
    "href": "reference/base.config.html",
    "title": "base.config",
    "section": "",
    "text": "base.config\n\n\n\n\n\nName\nDescription\n\n\n\n\nConfig\nBasis functie om de configuratie in te laden.\n\n\n\n\n\nbase.config.Config()\nBasis functie om de configuratie in te laden.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nconfig_path\n\nPad naar een .yaml bestand waarin per functie staat beschreven wat de in/ouput bestanden zijn\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig_path\n\n\n\ndata_adapters\n\n\n\nglobal_variables\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nlees_config\nLaad het gegeven pad in, zet de configuraties klaar in de Config class\n\n\n\n\n\nbase.config.Config.lees_config()\nLaad het gegeven pad in, zet de configuraties klaar in de Config class"
  },
  {
    "objectID": "reference/base.config.html#classes",
    "href": "reference/base.config.html#classes",
    "title": "base.config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nConfig\nBasis functie om de configuratie in te laden.\n\n\n\n\n\nbase.config.Config()\nBasis functie om de configuratie in te laden.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nconfig_path\n\nPad naar een .yaml bestand waarin per functie staat beschreven wat de in/ouput bestanden zijn\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig_path\n\n\n\ndata_adapters\n\n\n\nglobal_variables\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nlees_config\nLaad het gegeven pad in, zet de configuraties klaar in de Config class\n\n\n\n\n\nbase.config.Config.lees_config()\nLaad het gegeven pad in, zet de configuraties klaar in de Config class"
  },
  {
    "objectID": "reference/proof_of_concept.voorbeeld_module.html",
    "href": "reference/proof_of_concept.voorbeeld_module.html",
    "title": "proof_of_concept.voorbeeld_module",
    "section": "",
    "text": "proof_of_concept.voorbeeld_module\n\n\n\n\n\nName\nDescription\n\n\n\n\nWaardesDelenTwee\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nWaardesKeerTwee\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndelen_door_twee\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee.delen_door_twee(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee.run(input=None, output=None)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nkeer_twee\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee.keer_twee(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee.run(input=None, output=None)\nRunt de funcies en stuur de df terug"
  },
  {
    "objectID": "reference/proof_of_concept.voorbeeld_module.html#classes",
    "href": "reference/proof_of_concept.voorbeeld_module.html#classes",
    "title": "proof_of_concept.voorbeeld_module",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nWaardesDelenTwee\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nWaardesKeerTwee\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndelen_door_twee\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee.delen_door_twee(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.voorbeeld_module.WaardesDelenTwee.run(input=None, output=None)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nkeer_twee\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee.keer_twee(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\nproof_of_concept.voorbeeld_module.WaardesKeerTwee.run(input=None, output=None)\nRunt de funcies en stuur de df terug"
  },
  {
    "objectID": "reference/fragility_curves.calculate_fragility_curves.html",
    "href": "reference/fragility_curves.calculate_fragility_curves.html",
    "title": "fragility_curves.calculate_fragility_curves",
    "section": "",
    "text": "fragility_curves.calculate_fragility_curves\nfragility_curves.calculate_fragility_curves"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Voor meer informatie, vragen of opmerkingen over de Toolbox Continu Inzicht kunt u terecht bij:\nSTOWA: Oscar van Dam (vandam@stowa.nl)\nHKV: Marit Zethof (m.zethof@hkv.nl) en Bart Thonus (b.thonus@hkv.nl)",
    "crumbs": [
      "Achtergrond",
      "Contact"
    ]
  }
]