[
  {
    "objectID": "tests.html",
    "href": "tests.html",
    "title": "Testprotocol",
    "section": "",
    "text": "Elk ontwikkeld script wordt getest. Hiervoor is een testprotocol opgesteld (link naar document volgt). Dit testprotocol bestaat o.a. uit een unit test en integratietesten. Met unittesten testen we of de individuele componenten van de broncode goed werken (bijv. bij foutieve data). Integratietesten voeren we uit om de samenwerking tussen de verschillende scripts te controleren.\nVoor het testen gebruiken we de webviewer van de Toolbox Continu Inzicht en de standaard PostGreSQL database.",
    "crumbs": [
      "Achtergrond",
      "Testprotocol"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Toolbox voor continu inzicht\n\n\n\nbase.config\n\n\n\nbase.data_adapter\n\n\n\nproof_of_concept.example_module\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice\n\n\n\nloads.loads_fews.loads_fews\n\n\n\nloads.loads_waterinfo.loads_waterinfo",
    "crumbs": [
      "Python documentatie",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#continu-inzicht-toolbox",
    "href": "reference/index.html#continu-inzicht-toolbox",
    "title": "API Reference",
    "section": "",
    "text": "Toolbox voor continu inzicht\n\n\n\nbase.config\n\n\n\nbase.data_adapter\n\n\n\nproof_of_concept.example_module\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice\n\n\n\nloads.loads_fews.loads_fews\n\n\n\nloads.loads_waterinfo.loads_waterinfo",
    "crumbs": [
      "Python documentatie",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/loads.loads_rws_webservice.loads_rws_webservice.html",
    "href": "reference/loads.loads_rws_webservice.loads_rws_webservice.html",
    "title": "loads.loads_rws_webservice.loads_rws_webservice",
    "section": "",
    "text": "loads.loads_rws_webservice.loads_rws_webservice\n\n\n\n\n\nName\nDescription\n\n\n\n\nLoadsWaterwebservicesRWS\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS()\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl_retrieve_observations\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\ncreate_json_list\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\nget_data\nHaal de data a-synchroon op van de api gegevne een lijst met Json objecten\n\n\nrun\nDe runner van de Belasting WaterwebservicesRWS.\n\n\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.create_dataframe(options, t_now, lst_data)\nMaakt een dataframe met waardes van de rws water webservices\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.create_json_list(measurement, t_now, global_variables, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: t_now: T0 in UTC global_variables: globale variable uit de invoer yaml locations: dataframe with locations wanted\nReturns: dict: lijst met parameters\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.get_data(lst_json)\nHaal de data a-synchroon op van de api gegevne een lijst met Json objecten\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.run(input, output)\nDe runner van de Belasting WaterwebservicesRWS."
  },
  {
    "objectID": "reference/loads.loads_rws_webservice.loads_rws_webservice.html#classes",
    "href": "reference/loads.loads_rws_webservice.loads_rws_webservice.html#classes",
    "title": "loads.loads_rws_webservice.loads_rws_webservice",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nLoadsWaterwebservicesRWS\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS()\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl_retrieve_observations\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\ncreate_json_list\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\nget_data\nHaal de data a-synchroon op van de api gegevne een lijst met Json objecten\n\n\nrun\nDe runner van de Belasting WaterwebservicesRWS.\n\n\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.create_dataframe(options, t_now, lst_data)\nMaakt een dataframe met waardes van de rws water webservices\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.create_json_list(measurement, t_now, global_variables, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: t_now: T0 in UTC global_variables: globale variable uit de invoer yaml locations: dataframe with locations wanted\nReturns: dict: lijst met parameters\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.get_data(lst_json)\nHaal de data a-synchroon op van de api gegevne een lijst met Json objecten\n\n\n\nloads.loads_rws_webservice.loads_rws_webservice.LoadsWaterwebservicesRWS.run(input, output)\nDe runner van de Belasting WaterwebservicesRWS."
  },
  {
    "objectID": "reference/base.data_adapter.html",
    "href": "reference/base.data_adapter.html",
    "title": "base.data_adapter",
    "section": "",
    "text": "base.data_adapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nDataAdapter\nBasis DataAdapter\n\n\n\n\n\nbase.data_adapter.DataAdapter()\nBasis DataAdapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig\n\n\n\ninput_types\n\n\n\noutput_types\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ninitialize_input_types\nInitializes input mapping and checks to see if type in the configured types\n\n\ninitialize_output_types\nInitializes ouput mapping and checks to see if type in the configured types\n\n\ninput\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput_csv\nLaat een csv bestand in gegeven een pad\n\n\ninput_netcdf\nLaat een netcdf bestand in gegeven een pad\n\n\ninput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\noutput\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput_csv\nschrijft een csv bestand in gegeven een pad\n\n\noutput_netcdf\nschrijft een netCDF bestand in gegeven een pad\n\n\noutput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\n\n\n\nbase.data_adapter.DataAdapter.initialize_input_types()\nInitializes input mapping and checks to see if type in the configured types\nFuture editor: ensure that changes made here are also reflected in Config.available_types\n\n\n\nbase.data_adapter.DataAdapter.initialize_output_types()\nInitializes ouput mapping and checks to see if type in the configured types\n\n\n\nbase.data_adapter.DataAdapter.input(input)\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput: str Naam van de data adapter die gebruikt wordt.\nopties: dict extra informatie die ook naar de functie moet om het bestand te lezen\n\n\n\n\nbase.data_adapter.DataAdapter.input_csv(input_config)\nLaat een csv bestand in gegeven een pad\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_netcdf(input_config)\nLaat een netcdf bestand in gegeven een pad\n\n\nLees het netCDF bestand met xarray in en converteer de dataset naar een pandas dataframe.\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_postgresql(input_config)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ninput_config: dict in\n\n\n\nIn de .env environment bestand moet staan: postgresql_user: str postgresql_password: str postgresql_host: str postgresql_port: str database: str schema: str\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.output(output, df)\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput: name of the data adapter to use df: pd.Dataframe pandas dataframe om weg te schrijven\nopties: dict extra informatie die ook naar de functie moet om het bestand te schrijven\n\n\n\n\nbase.data_adapter.DataAdapter.output_csv(output_config, df)\nschrijft een csv bestand in gegeven een pad\n\n\nGebruikt hiervoor de pandas.DataFrame.to_csv Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_netcdf(output_config, df)\nschrijft een netCDF bestand in gegeven een pad\n\n\nGebruikt hiervoor eerst de xarray.from_dataframe om een xarray dataset te maken vervolgens xarray to_netcdf om het bestand te genereren. Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_postgresql(output_config, df)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ndf: pd.Dataframe dataframe met data om weg te schrijven opties: dict dictionary met extra opties waar onder: schema: str naam van het schema in de postgresql database table: str naam van de tabel in de postgresql database\n\n\n\nIn het credential bestand moet staan: postgresql_user: str postgresql_password: str postgresql_host: str postgresql_port: str database: str\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_rootdir\nCheckt of de rootdir bestaat\n\n\nget_kwargs\nGegeven een input/output functie, stuurt de relevanten kwargs uit de input config naar de functie.\n\n\n\n\n\nbase.data_adapter.check_rootdir(global_variables)\nCheckt of de rootdir bestaat\n\n\n\nbase.data_adapter.get_kwargs(function, input_config)\nGegeven een input/output functie, stuurt de relevanten kwargs uit de input config naar de functie."
  },
  {
    "objectID": "reference/base.data_adapter.html#classes",
    "href": "reference/base.data_adapter.html#classes",
    "title": "base.data_adapter",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nDataAdapter\nBasis DataAdapter\n\n\n\n\n\nbase.data_adapter.DataAdapter()\nBasis DataAdapter\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig\n\n\n\ninput_types\n\n\n\noutput_types\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ninitialize_input_types\nInitializes input mapping and checks to see if type in the configured types\n\n\ninitialize_output_types\nInitializes ouput mapping and checks to see if type in the configured types\n\n\ninput\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput_csv\nLaat een csv bestand in gegeven een pad\n\n\ninput_netcdf\nLaat een netcdf bestand in gegeven een pad\n\n\ninput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\noutput\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput_csv\nschrijft een csv bestand in gegeven een pad\n\n\noutput_netcdf\nschrijft een netCDF bestand in gegeven een pad\n\n\noutput_postgresql\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\n\n\n\nbase.data_adapter.DataAdapter.initialize_input_types()\nInitializes input mapping and checks to see if type in the configured types\nFuture editor: ensure that changes made here are also reflected in Config.available_types\n\n\n\nbase.data_adapter.DataAdapter.initialize_output_types()\nInitializes ouput mapping and checks to see if type in the configured types\n\n\n\nbase.data_adapter.DataAdapter.input(input)\nGegeven het config, stuurt de juiste input waarde aan\n\n\ninput: str Naam van de data adapter die gebruikt wordt.\nopties: dict extra informatie die ook naar de functie moet om het bestand te lezen\n\n\n\n\nbase.data_adapter.DataAdapter.input_csv(input_config)\nLaat een csv bestand in gegeven een pad\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_netcdf(input_config)\nLaat een netcdf bestand in gegeven een pad\n\n\nLees het netCDF bestand met xarray in en converteer de dataset naar een pandas dataframe.\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.input_postgresql(input_config)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ninput_config: dict in\n\n\n\nIn de .env environment bestand moet staan: postgresql_user: str postgresql_password: str postgresql_host: str postgresql_port: str database: str schema: str\n\n\n\npd.Dataframe\n\n\n\n\nbase.data_adapter.DataAdapter.output(output, df)\nGegeven het config, stuurt de juiste input waarde aan\n\n\noutput: name of the data adapter to use df: pd.Dataframe pandas dataframe om weg te schrijven\nopties: dict extra informatie die ook naar de functie moet om het bestand te schrijven\n\n\n\n\nbase.data_adapter.DataAdapter.output_csv(output_config, df)\nschrijft een csv bestand in gegeven een pad\n\n\nGebruikt hiervoor de pandas.DataFrame.to_csv Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_netcdf(output_config, df)\nschrijft een netCDF bestand in gegeven een pad\n\n\nGebruikt hiervoor eerst de xarray.from_dataframe om een xarray dataset te maken vervolgens xarray to_netcdf om het bestand te genereren. Opties om dit aan te passen kunnen worden mee gegeven in het configuratie bestand.\n\n\n\nNone\n\n\n\n\nbase.data_adapter.DataAdapter.output_postgresql(output_config, df)\nSchrijft data naar een postgresql database gegeven het pad naar een credential bestand.\n\n\ndf: pd.Dataframe dataframe met data om weg te schrijven opties: dict dictionary met extra opties waar onder: schema: str naam van het schema in de postgresql database table: str naam van de tabel in de postgresql database\n\n\n\nIn het credential bestand moet staan: postgresql_user: str postgresql_password: str postgresql_host: str postgresql_port: str database: str\n\n\n\nNone"
  },
  {
    "objectID": "reference/base.data_adapter.html#functions",
    "href": "reference/base.data_adapter.html#functions",
    "title": "base.data_adapter",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_rootdir\nCheckt of de rootdir bestaat\n\n\nget_kwargs\nGegeven een input/output functie, stuurt de relevanten kwargs uit de input config naar de functie.\n\n\n\n\n\nbase.data_adapter.check_rootdir(global_variables)\nCheckt of de rootdir bestaat\n\n\n\nbase.data_adapter.get_kwargs(function, input_config)\nGegeven een input/output functie, stuurt de relevanten kwargs uit de input config naar de functie."
  },
  {
    "objectID": "reference/loads.loads_fews.loads_fews.html",
    "href": "reference/loads.loads_fews.loads_fews.html",
    "title": "loads.loads_fews.loads_fews",
    "section": "",
    "text": "loads.loads_fews.loads_fews\n\n\n\n\n\nName\nDescription\n\n\n\n\nLoadsFews\nMet deze functie wordt er bij de opgegeven FEWS omgeving via\n\n\n\n\n\nloads.loads_fews.loads_fews.LoadsFews()\nMet deze functie wordt er bij de opgegeven FEWS omgeving via REST gegevens opgehaald.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe\n\n\ncreate_params\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\ncreate_url\nMaak een rest url voor FEWS\n\n\nrun\nDe runner van de Loads Fews.\n\n\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_dataframe(options, t_now, json_data, locations)\nMaak een pandas dataframe\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_params(t_now, options, moments, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: t_now (datetime): T0 in UTC options (type): options uit de invoer yaml\nReturns: dict: lijst met parameters\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_url(options)\nMaak een rest url voor FEWS\nArgs: options (type): Options uit de invoer yaml\nReturns: str: URL\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.run(input, output)\nDe runner van de Loads Fews.\nArgs:\nReturns: Dataframe: Pandas dataframe met opgehaalde gegevens uit FEWS."
  },
  {
    "objectID": "reference/loads.loads_fews.loads_fews.html#classes",
    "href": "reference/loads.loads_fews.loads_fews.html#classes",
    "title": "loads.loads_fews.loads_fews",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nLoadsFews\nMet deze functie wordt er bij de opgegeven FEWS omgeving via\n\n\n\n\n\nloads.loads_fews.loads_fews.LoadsFews()\nMet deze functie wordt er bij de opgegeven FEWS omgeving via REST gegevens opgehaald.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe\n\n\ncreate_params\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\ncreate_url\nMaak een rest url voor FEWS\n\n\nrun\nDe runner van de Loads Fews.\n\n\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_dataframe(options, t_now, json_data, locations)\nMaak een pandas dataframe\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_params(t_now, options, moments, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: t_now (datetime): T0 in UTC options (type): options uit de invoer yaml\nReturns: dict: lijst met parameters\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.create_url(options)\nMaak een rest url voor FEWS\nArgs: options (type): Options uit de invoer yaml\nReturns: str: URL\n\n\n\nloads.loads_fews.loads_fews.LoadsFews.run(input, output)\nDe runner van de Loads Fews.\nArgs:\nReturns: Dataframe: Pandas dataframe met opgehaalde gegevens uit FEWS."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Toolbox continu inzicht",
    "section": "",
    "text": "Waterkeringbeheerders zijn gewend om hun waterkeringen te laten voldoen aan vastgestelde normen: daar baseren ze het ontwerp en hun beheer en onderhoud op. In een situatie met extreme droogte of extreem hoge waterstanden is er meer nodig. Dan is het belangrijk continu inzicht te hebben in de actuele risico’s voor het gebied in de eerstvolgende dagen. De methode ‘continu inzicht’ is precies daarop gericht: ervoor zorgen dat de beheerder 24/7 in control is. Met slimme monitoring en rekenmodellen wordt de actuele situatie geanalyseerd. De beheerder ziet hoe groot het risico is en waar de zwakke plekken zitten, zodat hij of zij gericht maatregelen kan nemen. De ‘Toolbox continu inzicht’ is door HKV lijn in water ontwikkeld voor waterschappen en Rijkswaterstaat. Doormiddel van deze python toolbox worden de systemen achter ‘continu inzicht’ her ontwikkeld in python en open source aangeboden.",
    "crumbs": [
      "Achtergrond",
      "Toolbox continu inzicht"
    ]
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html",
    "href": "examples/notebooks/proof_of_concept.html",
    "title": "Architectuur voorbeeld",
    "section": "",
    "text": "Om de architectuur weer te geven wordt een simple voorbeeld gegeven door een reeks keer twee en gedeelddoor te doen.\nDe opbouw van de code is hier onder weergegeven:\nEen voorbeeld senario is het inladen van CSV en wegschrijven naar csv:\nAan de voorkant ziet dat er zo uit:",
    "crumbs": [
      "Voorbeelden",
      "Architectuur voorbeeld"
    ]
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "href": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "title": "Architectuur voorbeeld",
    "section": "Voorbeeld met CSV",
    "text": "Voorbeeld met CSV\nLees de configuratie in:\nDit leest een configuratie bestand test_config.yaml in:\nGlobalVariables:\n    rootdir: 'data_sets'\n\nDataAdapter:\n    default_options:\n        postgresql_database:\n            database: 'citoolbox'\n            schema: 'citoolbox_schema'\n    \n    MyCSV_in: \n        type: csv\n        file: 'test_csv_in.csv'\n    MyCSV_out: \n        type: csv\n        file: 'test_csv_out.csv'\n    MyPostgresql: \n        type: postgresql_database\n        table: data\n\n...\n\ntest_data_sets_path = Path.cwd() / \"data_sets\"\nc = Config(config_path=test_data_sets_path / \"test_config.yaml\")\nc.lees_config()\n\nZet de data adapter klaar en geef deze de configuratie mee\n\nfrom toolbox_continu_inzicht import DataAdapter\n\ndata = DataAdapter(config=c)\n\nRun de module met CSV\n\nfrom toolbox_continu_inzicht import example_module\n\nkeer_twee = example_module.ValuesTimesTwo(data_adapter=data)\n\n\nkeer_twee.run(input=\"MyCSV_in\", output=\"MyCSV_out\")\n\n\nkeer_twee.df_in\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndatetime\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n4.8\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n5.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n5.2\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n5.4\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n5.6\n\n\n\n\n\n\n\n\nkeer_twee.df_out\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndatetime\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n9.6\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n10.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n10.4\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n10.8\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n11.2\n\n\n\n\n\n\n\nde values waardes uit de vorige table zijn vermenigvuldigd met twee",
    "crumbs": [
      "Voorbeelden",
      "Architectuur voorbeeld"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Alle noemenswaardige veranderingen worden hier bijgehouden. Dit project gebruikt Semantic Versioning. Het format is beschreven op keepachangelog.com.\n\n\n\n\n\nWerkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19",
    "crumbs": [
      "Achtergrond",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#ongeplubliceerd",
    "href": "changelog.html#ongeplubliceerd",
    "title": "Changelog",
    "section": "",
    "text": "Werkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19",
    "crumbs": [
      "Achtergrond",
      "Changelog"
    ]
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "De Toolbox Continu Inzicht wordt incrementeel ontwikkeld. De IT-ontwikkeling is opgedeeld in sprintblokken. Binnen elk sprintblok worden één of meerdere modules ontwikkeld. Voor elke module worden Python-scripts ontwikkeld waarmee een functie kan worden uitgevoerd. Een voorbeeld van een functie is het uitlezen van waterstanden uit FEWS. De scripts en de code (inclusief documentatie) worden na het afronden van iedere sprint gepubliceerd op deze Wikipagina en een publieke Github. De scripts worden vrijgegeven nadat deze succesvol het testprotocol hebben doorlopen.\nDe ontwikkeling van de volgende modules is voorzien:",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-architectuur",
    "href": "modules.html#sec-architectuur",
    "title": "Modules",
    "section": "Basis architectuur Toolbox Continu Inzicht",
    "text": "Basis architectuur Toolbox Continu Inzicht\nDe architectuur van de toolbox continu inzicht is ontworpen om flexibel te zijn.\n\nConfiguratie\nPer systeem kunnen de wensen van de gebruiker veranderen, het systeem is dan ook te configureren voor verschillende data bronnen. Door middel van een yaml configuratie bestand wordt de juist informatie meegegeven aan de modules en de data adapter.\nHet kopje GlobalVariables is verplicht met minimaal een rootdir: dit is een map waarin de data bestanden staan en weggeschreven worden. De DataAdapter is ook verplicht, met minimaal één data adapter. De naam van de adapter kan vrij gekozen worden, hier van kunnen zo veel als gewenst worden aangemaakt\nGlobalVariables:\n    rootdir: 'C:/data/toobox/'\n\nDataAdapter:\n    EenTypeDataAdapter: \n        type: csv\n        file: 'eerste_voorbeeld.csv'\nOnder GlobalVariables kan per data type variabele worden meegegeven die voor alle adapters van dit type gelden. Voor csv kan dit bijvoorbeeld het scheidingsteken zijn. Alle data adapters met het type csv krijgen nu de extra variabele mee.\nGlobalVariables:\n    rootdir: 'C:/data/toobox/'\n    csv:\n        delimiter: ';'\n\nDataAdapter:\n    EenTypeDataAdapter: \n        type: csv\n        file: 'eerste_voorbeeld.csv'\n    CSV_output: \n        type: csv\n        file: 'voorbeeld_output.csv'\nNaast de data adapters worden modules ook geconfigureerd in de GlobalVariables. Zo worden de opties voor de module LoadsMatroos ook mee gegeven in de GlobalVariables.\nGlobalVariables:\n    rootdir: 'C:/data/toobox/'\n    \n    LoadsMatroos:\n        website: 'noos'\n        source: 'dcsm6_kf'\n        parameters: ['waterlevel']\n        MISSING_VALUE: 999\n\nDataAdapter:\n    ...\n\n\nData adapter\nDe data adapter wordt gebruikt om verschillende data types in en uit te lezen. Op het moment zijn dit de volgende data formaten:\n\nCSV\nNetCDF\nPostgreSQL\n\nDeze wordt geconfigureerd in de een .yaml configuratie bestand, een voorbeeld van een csv-bestand wordt hieronder weergegeven. Hierbij zijn type en file of path verplicht. In het voorbeeld hier onder wordt een relatief pad mee gegeven als rootdir, dit wordt ook ondersteund.\nGlobalVariables:\n    rootdir: 'data_sets'\n\nDataAdapter:\n    MyCSV_in: \n        type: csv\n        file: 'test_csv_in.csv'\n    MyCSV_out: \n        type: csv\n        file: 'test_csv_out.csv'\n...\nIndien een bestand buiten de root directory valt kan in plaats van fileook een absoluut path worden mee gegeven.\nDataAdapter:\n    MyCSV_anders: \n        type: csv\n        path: 'C:/data/Ander/pad_naar_csv.csv'\n...\nNaast de verplichte opties, worden alle overige opties doorgegeven aan de output functie. De csvmodule maakt gebruik van de pandas.read_csv module voor het lees werk, all opties die deze module ondersteund kunnen worden doorgegeven. Voor NetCDF is dit xarray.open_dataset. Echter is voor PostgreSQL dit niet het geval, hier zijn alleen een drie standaard opties beschikbaar: database, schema en table.\n\n\nWachtwoorden\nVoor bepaalde diensten, zo als toegang tot een database, zijn wachtwoorden nodig. Deze kunnen in de ‘environmental variables’ worden mee gegeven, in de vorm van een .env bestand.\nhost='xxx.xx.xx.xx'\ndatabase='xxxxxxx'\nport='xxxx'\npassword='xxxx'\nuser='xx'",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-belastingen",
    "href": "modules.html#sec-belastingen",
    "title": "Modules",
    "section": "Belastingen inlezen en classificeren",
    "text": "Belastingen inlezen en classificeren\nOm continu inzicht te leveren in de veiligheid van waterkeringen is het van belang de belastingen op de keringen in kaart te brengen. Deze worden ingelezen uit verschillende bronnen en vervolgens geclassificeerd.\n\nBelastingen inlezen\nDe Bronnen die op dit moment worden ondersteund in de toolbox continu inzicht zijn:\n\nDelft FEWS\nMatroos\nRWS water web services\nRWS waterinfo\n\n\nDelft FEWS\nVeel waterschappen gebruiken een Delft - Forecast Early Warning System (FEWS) implementatie voor het beheren van verschillende interne en externe informatie bronnen. Via de REST API van FEWS kunnen verschillende belastingen worden ingelezen. Toegang verkrijgen tot FEWS is complexer dan andere bronnen, hierom zijn meer parameters nodig in het configuratiebestand. De functie get_fews_locations() kan worden gebruikt om de beschikbare locaties te tonen.\n\nGlobalVariables:\n    rootdir: \"data_sets\"  \n    moments: [-24,0,24,48]\n    ...\n\n    LoadsFews:\n        host: \"https:**********\"\n        port: ****\n        region: \"fewspiservice\"\n        version: \"1.25\"\n        filter: \"HKV_WV_1\"\n        parameters: [\"WNSHDB1\"]  \n        MISSING_VALUE: -9999.0    \n\nDataAdapter:\n    ...\n\n\nMatroos\nMatroos of Multifunctional Access Tool foR Operational Oceandata Services is een systeem van Rijkswaterstaat (RWS). Recente waterstand metingen en verwachtingen kunnen hieruit worden opgehaald. Matroos is beschikbaar in verschillende smaken, waarvan drie relevant. De verschillen worden in de tabel hieronder toegelicht, zie iplo.nl voor meer informatie. In de toolbox wordt nu alleen de series API gebruikt dus volstaat NOOS.\n\n\n\nURL\nType\nInhoud\nDoelgroep\n\n\n\n\nvitaal.matroos.rws.nl\nextern, vitaal\n21 dagen\nKustwacht, Waterschappen\n\n\nmatroos.rws.nl\nextern\nVolledige historie\nWaterschappen, universiteiten, extene\n\n\nnoos.matroos.rws.nl\nextern, open\nBeperkte set; series:volledig; maps: 14 dagen\nNOOS internationaal, Open Data\n\n\n\nIn Matroos zijn verschillende bronnen beschikbaar, met get_matroos_sources() kan een lijst van deze worden gegeneerd. De beschikbare locaties kunnen worden weergegeven met get_matroos_locations(), met mogelijkheid om te filteren op een bron en parameter.\n\nGlobalVariables:\n    rootdir: \"data_sets\" \n    moments: [-24,0,24,48]\n    ...\n\n    LoadsMatroos:\n        website: \"noos\" # noos, vitaal of matroos\n        source: \"observed\"\n        parameters: [\"waterlevel\"]\n        MISSING_VALUE: 999\n\nDataAdapter:\n    ...\nVoor het gebruik van vitaal en matroos is een gebruikersnaam en wachtwoord nodig. Deze moeten in de environmental variables worden meegegeven (.env bestand).\nvitaal_user: \"...\"\nvitaal_password: \"...\"\n# of \nmatroos_user: \"...\"\nmatroos_password: \"...\"\n\n\nRWS WaterWebservices\nWaar matroos meer gericht is op zee, zijn waterstand metingen en verwachtingen rondom rivieren beschikbaar via de WaterWebservices API. Deze is openbaar en vereist weinig configuratie. De MISSING_VALUE kan in de configuratie worden aangepast, maar staat al standaard ingesteld.\n    LoadsWaterwebservicesRWS:\n        MISSING_VALUE: 999999999.0\nBeschikbare locaties kunnen worden weergegeven met get_rws_webservices_locations().\n\n\nRWS waterinfo\nNaast de WaterWebservices is alle informatie van Rijkswaterstaat ook verkrijgbaar via waterinfo.rws.nl. Deze is openbaar, wel moet het data type worden opgegeven en de uren voor en na het moment van opvragen.\n GlobalVariables:\n    rootdir: \"data_sets\"\n\n    LoadsWaterinfo:\n        datatype: \"waterhoogte\"\n        observedhours: 48\n        predictionhours: 48\n        MISSING_VALUE: -9999.0\n\n\n\nClassificeren van beslastingen",
    "crumbs": [
      "Achtergrond",
      "Modules"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Het ontwikkelen van de toolbox continu inzicht bestaat uit twee delen. Eerst ontwikkeld HKV de basisfunctionaliteit. Deze ontwikkeling is voor iedereen te volgen op GitHub, maar toevoegingen worden nog niet geaccepteerd. Daarna blijft het project open source beschikbaar en kan het verder worden ontwikkeld. De term ‘ontwikkelaars’ duidt in de eerste ontwikkelfase op het team van HKV, later op anderen die een bijdrage willen leveren. Een bijdragen kan uiteenlopen van een vraag tot een grote wijziging via een pull request.\nEen bijdrage kan een van de volgend dingen zijn:\n\nJe hebt een vraag\nJe denkt een probleem (bug) te hebben gevonden (of onverwachte functionaliteit)\nJe wilt een aanpassing maken (Bug fixen, nieuwe functionaliteit, update aan de documentatie)\nJe wilt een nieuwe versie publiceren\n\nDe onderstaande secties behandelen de stappen per geval.\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg de \"Question” label toe; voeg andere labels toe waar nodig.\n\n\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.\n\n\n\n\n\n(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeld configuratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor andere.\npush je branch. naar (jou fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests worden ontvangen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je test schrijft of runt, of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.\n\n\n\nDit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht voor all actie, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versie tag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de Github actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-hebt-een-vraag",
    "href": "contributing.html#je-hebt-een-vraag",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg de \"Question” label toe; voeg andere labels toe waar nodig.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "href": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-aanpassing-maken",
    "href": "contributing.html#je-wilt-een-aanpassing-maken",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeld configuratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor andere.\npush je branch. naar (jou fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests worden ontvangen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je test schrijft of runt, of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "href": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Dit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest;\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht voor all actie, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versie tag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de Github actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installatie-instructies",
    "section": "",
    "text": "De toolbox continu inzicht kan op verschillende manieren worden gebruikt:\n\nAls vervanging van de huidige Continu Inzicht back-end\nAls losstaande modules\nAls ontwikkelaar\n\n\n\nOm de toolbox als vervanging van de huidige Continu Inzicht back-end te gebruiken, zal in de toekomst meer informatie beschikbaar gesteld worden. De oude back-end kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen kunnen dan worden meegenomen.\n\n\n\nOm de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht\n\n\n\nZie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Achtergrond",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#vervanging",
    "href": "install.html#vervanging",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Om de toolbox als vervanging van de huidige Continu Inzicht back-end te gebruiken, zal in de toekomst meer informatie beschikbaar gesteld worden. De oude back-end kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen kunnen dan worden meegenomen.",
    "crumbs": [
      "Achtergrond",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#losstaande-modules",
    "href": "install.html#losstaande-modules",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Om de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht",
    "crumbs": [
      "Achtergrond",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#als-ontwikkelaar",
    "href": "install.html#als-ontwikkelaar",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Zie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Achtergrond",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "reference/loads.loads_waterinfo.loads_waterinfo.html",
    "href": "reference/loads.loads_waterinfo.loads_waterinfo.html",
    "title": "loads.loads_waterinfo.loads_waterinfo",
    "section": "",
    "text": "loads.loads_waterinfo.loads_waterinfo\n\n\n\n\n\nName\nDescription\n\n\n\n\nLoadsWaterinfo\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo()\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\n\n\nrun\nDe runner van de Belasting Waterinfo.\n\n\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo.create_dataframe(options, measuringstation, json_data)\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\nArgs: options (dict): t_now (datetime): json_data (str): JSON data locations (Dataframe):\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo.run(input, output)\nDe runner van de Belasting Waterinfo."
  },
  {
    "objectID": "reference/loads.loads_waterinfo.loads_waterinfo.html#classes",
    "href": "reference/loads.loads_waterinfo.loads_waterinfo.html#classes",
    "title": "loads.loads_waterinfo.loads_waterinfo",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nLoadsWaterinfo\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo()\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\n\n\nrun\nDe runner van de Belasting Waterinfo.\n\n\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo.create_dataframe(options, measuringstation, json_data)\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\nArgs: options (dict): t_now (datetime): json_data (str): JSON data locations (Dataframe):\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer\n\n\n\nloads.loads_waterinfo.loads_waterinfo.LoadsWaterinfo.run(input, output)\nDe runner van de Belasting Waterinfo."
  },
  {
    "objectID": "reference/base.config.html",
    "href": "reference/base.config.html",
    "title": "base.config",
    "section": "",
    "text": "base.config\n\n\n\n\n\nName\nDescription\n\n\n\n\nConfig\nBasis functie om de configuratie in te laden.\n\n\n\n\n\nbase.config.Config()\nBasis functie om de configuratie in te laden.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nconfig_path\n\nPad naar een .yaml bestand waarin per functie staat beschreven wat de in/ouput bestanden zijn\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\navailable_types\n\n\n\nconfig_path\n\n\n\ndata_adapters\n\n\n\nglobal_variables\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nlees_config\nLaad het gegeven pad in, zet de configuraties klaar in de Config class\n\n\n\n\n\nbase.config.Config.lees_config()\nLaad het gegeven pad in, zet de configuraties klaar in de Config class"
  },
  {
    "objectID": "reference/base.config.html#classes",
    "href": "reference/base.config.html#classes",
    "title": "base.config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nConfig\nBasis functie om de configuratie in te laden.\n\n\n\n\n\nbase.config.Config()\nBasis functie om de configuratie in te laden.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nconfig_path\n\nPad naar een .yaml bestand waarin per functie staat beschreven wat de in/ouput bestanden zijn\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\navailable_types\n\n\n\nconfig_path\n\n\n\ndata_adapters\n\n\n\nglobal_variables\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nlees_config\nLaad het gegeven pad in, zet de configuraties klaar in de Config class\n\n\n\n\n\nbase.config.Config.lees_config()\nLaad het gegeven pad in, zet de configuraties klaar in de Config class"
  },
  {
    "objectID": "reference/proof_of_concept.example_module.html",
    "href": "reference/proof_of_concept.example_module.html",
    "title": "proof_of_concept.example_module",
    "section": "",
    "text": "proof_of_concept.example_module\n\n\n\n\n\nName\nDescription\n\n\n\n\nValuesDivideTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nValuesTimesTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndelen_door_twee\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.delen_door_twee(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\nArgs: data_adapter: DataAdapter Leest\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nkeer_twee\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.keer_twee(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.run(input, output)\nRunt de funcies en stuur de df terug"
  },
  {
    "objectID": "reference/proof_of_concept.example_module.html#classes",
    "href": "reference/proof_of_concept.example_module.html#classes",
    "title": "proof_of_concept.example_module",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nValuesDivideTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nValuesTimesTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndelen_door_twee\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.delen_door_twee(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\nArgs: data_adapter: DataAdapter Leest\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nkeer_twee\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.keer_twee(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.run(input, output)\nRunt de funcies en stuur de df terug"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Voor meer informatie, vragen of opmerkingen over de Toolbox Continu Inzicht kunt u terecht bij:\nSTOWA: Oscar van Dam (vandam@stowa.nl)\nHKV: Marit Zethof (m.zethof@hkv.nl) en Bart Thonus (b.thonus@hkv.nl)",
    "crumbs": [
      "Achtergrond",
      "Contact"
    ]
  }
]