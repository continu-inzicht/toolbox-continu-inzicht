[
  {
    "objectID": "tests.html",
    "href": "tests.html",
    "title": "Testprotocol",
    "section": "",
    "text": "Elk ontwikkeld script wordt getest. Dit testprotocol bestaat uit een unit testen en integratietesten. Met unittesten testen we of de individuele componenten van de broncode goed werken (bijv. als de gebruiker foutieve data opgeeft). Bij het maken van unittesten is het doel om een totale dekking van 80% te halen over de gehele code, dit kan gecontroleerd worden met pytest -cov. Bij sommige modules is dit het makkelijk om alle code te vatten in een test, in die gevallen is dit dan ook de bedoeling om dit te doen. Doordat de interactie met een postgresql database of FEWS REST-API niet makkelijk te verwerken is in een automatische test, is er per functie geen strikte eis. Om toch de interactie met componenten die beveiligd zijn en om de samenwerking tussen de verschillende scripts te controleren, worden integratie testen uitgevoerd. In de ontwikkel fase vinden deze integratie testen plaats aan het einde van de sprints door een deel van de project groep die niet de code actief heeft ontwikkeld. In de beheer fase zal het team dat de code blijft beheren deze integratie testen blijven uitvoeren.",
    "crumbs": [
      "Overig",
      "Testprotocol"
    ]
  },
  {
    "objectID": "reference/data_adapter.html",
    "href": "reference/data_adapter.html",
    "title": "data_adapter",
    "section": "",
    "text": "data_adapter\ndata_adapter"
  },
  {
    "objectID": "reference/loads.get_waterinfo_locations.html",
    "href": "reference/loads.get_waterinfo_locations.html",
    "title": "loads.get_waterinfo_locations",
    "section": "",
    "text": "loads.get_waterinfo_locations\nloads.get_waterinfo_locations(parameter_id='waterhoogte')\nHaal voor Waterinfo de locaties op voor de opgegegeven parameter\nArgs: parameter_id (str): Waterinfo parameter bij geen waarde ‘waterhoogte’\nReturns: Dataframe: Pandas dataframe met locaties"
  },
  {
    "objectID": "reference/loads.get_fews_thresholds.html",
    "href": "reference/loads.get_fews_thresholds.html",
    "title": "loads.get_fews_thresholds",
    "section": "",
    "text": "loads.get_fews_thresholds\nloads.get_fews_thresholds(host, port, region, filter_id, parameter_id, location_id)\nHaal voor Fews de thresholds op voor de opgegegeven parameter en locatie\nArgs: host (str): fews server host url port (int): port waar de restservice draait region (str): in fews gedefinieerde region filter_id (str): filter van de timeserie parameter_id (str): parameter van de timeserie locatie_id (str): locatie van de timeserie\nReturns: Dataframe: Pandas dataframe met thresholds"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Lees & schrijf functionaliteit waar andere functies op verder bouwen\n\n\n\nconfig\n\n\n\ndata_adapter\n\n\n\nproof_of_concept.example_module\n\n\n\n\n\n\n\nVerschillende functies die belastingen inladen, classifiseren of toekennen.\n\n\n\nloads.LoadsCIWhatIf\nMet deze functie worden belasting opgehaald en weggeschreven\n\n\nloads.LoadsClassify\nMet deze functie worden de waterstanden met opgegeven grenzen geclassificeerd\n\n\nloads.LoadsFews\nMet deze functie wordt er bij de opgegeven FEWS omgeving via\n\n\nloads.get_fews_locations\nHaal voor Fews de locaties op voor de opgegegeven parameters\n\n\nloads.get_fews_thresholds\nHaal voor Fews de thresholds op voor de opgegegeven parameter en locatie\n\n\nloads.LoadsMatroos\nDe LoadsMatroos klasse haalt belastinggegevens op van de Rijkswaterstaat Waterwebservices.\n\n\nloads.get_matroos_locations\nHaalt alle matroos locaties op, indien gewenst ook bron en parameter\n\n\nloads.LoadsWaterwebservicesRWS\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\nloads.get_rws_webservices_locations\nHaal locaties die bekend zijn bij de RWS webservice.\n\n\nloads.LoadsToMoments\nMet deze klasse kunnen waterstandsgegevens worden omgezet naar bepaalde momenten.\n\n\nloads.LoadsWaterinfo\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\nloads.get_waterinfo_locations\nHaal voor Waterinfo de locaties op voor de opgegegeven parameter\n\n\nloads.get_waterinfo_thresholds\nHaal voor Waterinfo de thresholds op voor de opgegegeven parameter",
    "crumbs": [
      "Python API",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#basis",
    "href": "reference/index.html#basis",
    "title": "API Reference",
    "section": "",
    "text": "Lees & schrijf functionaliteit waar andere functies op verder bouwen\n\n\n\nconfig\n\n\n\ndata_adapter\n\n\n\nproof_of_concept.example_module",
    "crumbs": [
      "Python API",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#belastingen",
    "href": "reference/index.html#belastingen",
    "title": "API Reference",
    "section": "",
    "text": "Verschillende functies die belastingen inladen, classifiseren of toekennen.\n\n\n\nloads.LoadsCIWhatIf\nMet deze functie worden belasting opgehaald en weggeschreven\n\n\nloads.LoadsClassify\nMet deze functie worden de waterstanden met opgegeven grenzen geclassificeerd\n\n\nloads.LoadsFews\nMet deze functie wordt er bij de opgegeven FEWS omgeving via\n\n\nloads.get_fews_locations\nHaal voor Fews de locaties op voor de opgegegeven parameters\n\n\nloads.get_fews_thresholds\nHaal voor Fews de thresholds op voor de opgegegeven parameter en locatie\n\n\nloads.LoadsMatroos\nDe LoadsMatroos klasse haalt belastinggegevens op van de Rijkswaterstaat Waterwebservices.\n\n\nloads.get_matroos_locations\nHaalt alle matroos locaties op, indien gewenst ook bron en parameter\n\n\nloads.LoadsWaterwebservicesRWS\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\nloads.get_rws_webservices_locations\nHaal locaties die bekend zijn bij de RWS webservice.\n\n\nloads.LoadsToMoments\nMet deze klasse kunnen waterstandsgegevens worden omgezet naar bepaalde momenten.\n\n\nloads.LoadsWaterinfo\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\nloads.get_waterinfo_locations\nHaal voor Waterinfo de locaties op voor de opgegegeven parameter\n\n\nloads.get_waterinfo_thresholds\nHaal voor Waterinfo de thresholds op voor de opgegegeven parameter",
    "crumbs": [
      "Python API",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/loads.LoadsWaterwebservicesRWS.html",
    "href": "reference/loads.LoadsWaterwebservicesRWS.html",
    "title": "loads.LoadsWaterwebservicesRWS",
    "section": "",
    "text": "loads.LoadsWaterwebservicesRWS()\nBelasting gegevens ophalen van rijkswaterstaat waterwebservices https://waterwebservices.rijkswaterstaat.nl/\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata_adapter\nDataAdapter\nDe data adapter voor het ophalen en opslaan van gegevens. df_in: Optional[pd.DataFrame] | None = None Het invoerdataframe. df_out: Optional[pd.DataFrame] | None = None Het uitvoerdataframe.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\ncreate_json_list\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\nrun\nDe runner van de Belasting WaterwebservicesRWS.\n\n\n\n\n\nloads.LoadsWaterwebservicesRWS.create_dataframe(options, calc_time, lst_data, df_in)\nMaakt een dataframe met waardes van de rws water webservices\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptions\ndict\nEen dictionary met opties uit de config\nrequired\n\n\ncalc_time\ndatetime\nDe huidige tijd\nrequired\n\n\nlst_data\nlist\nEen lijst met JSON data uit de post request\nrequired\n\n\n\n\n\n\npd.Dataframe\n    Pandas dataframe geschikt voor uitvoer\n\n\n\n\nloads.LoadsWaterwebservicesRWS.create_json_list(measurement, calc_time, global_variables, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: calc_time: T0 in UTC global_variables: globale variable uit de invoer yaml locations: dataframe with locations wanted\nReturns: dict: lijst met parameters\n\n\n\nloads.LoadsWaterwebservicesRWS.run(input, output)\nDe runner van de Belasting WaterwebservicesRWS."
  },
  {
    "objectID": "reference/loads.LoadsWaterwebservicesRWS.html#attributes",
    "href": "reference/loads.LoadsWaterwebservicesRWS.html#attributes",
    "title": "loads.LoadsWaterwebservicesRWS",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ndata_adapter\nDataAdapter\nDe data adapter voor het ophalen en opslaan van gegevens. df_in: Optional[pd.DataFrame] | None = None Het invoerdataframe. df_out: Optional[pd.DataFrame] | None = None Het uitvoerdataframe."
  },
  {
    "objectID": "reference/loads.LoadsWaterwebservicesRWS.html#methods",
    "href": "reference/loads.LoadsWaterwebservicesRWS.html#methods",
    "title": "loads.LoadsWaterwebservicesRWS",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\ncreate_json_list\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\nrun\nDe runner van de Belasting WaterwebservicesRWS.\n\n\n\n\n\nloads.LoadsWaterwebservicesRWS.create_dataframe(options, calc_time, lst_data, df_in)\nMaakt een dataframe met waardes van de rws water webservices\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptions\ndict\nEen dictionary met opties uit de config\nrequired\n\n\ncalc_time\ndatetime\nDe huidige tijd\nrequired\n\n\nlst_data\nlist\nEen lijst met JSON data uit de post request\nrequired\n\n\n\n\n\n\npd.Dataframe\n    Pandas dataframe geschikt voor uitvoer\n\n\n\n\nloads.LoadsWaterwebservicesRWS.create_json_list(measurement, calc_time, global_variables, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: calc_time: T0 in UTC global_variables: globale variable uit de invoer yaml locations: dataframe with locations wanted\nReturns: dict: lijst met parameters\n\n\n\nloads.LoadsWaterwebservicesRWS.run(input, output)\nDe runner van de Belasting WaterwebservicesRWS."
  },
  {
    "objectID": "reference/loads.get_rws_webservices_locations.html",
    "href": "reference/loads.get_rws_webservices_locations.html",
    "title": "loads.get_rws_webservices_locations",
    "section": "",
    "text": "loads.get_rws_webservices_locations\nloads.get_rws_webservices_locations()\nHaal locaties die bekend zijn bij de RWS webservice."
  },
  {
    "objectID": "reference/loads.get_fews_locations.html",
    "href": "reference/loads.get_fews_locations.html",
    "title": "loads.get_fews_locations",
    "section": "",
    "text": "loads.get_fews_locations\nloads.get_fews_locations(host, port, region, filter_id)\nHaal voor Fews de locaties op voor de opgegegeven parameters\nArgs: host (str): Fews server host url port (int): port waar de rest service draait region (str): in fews gedefinieerde region filter_id (str): filter van de locaties\nReturns: Dataframe: Pandas dataframe met locaties"
  },
  {
    "objectID": "reference/proof_of_concept.example_module.html",
    "href": "reference/proof_of_concept.example_module.html",
    "title": "proof_of_concept.example_module",
    "section": "",
    "text": "proof_of_concept.example_module\n\n\n\n\n\nName\nDescription\n\n\n\n\nValuesDivideTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nValuesTimesTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndivide_two\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.divide_two(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\nArgs: data_adapter: DataAdapter Leest\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\ntimes_two\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.times_two(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld"
  },
  {
    "objectID": "reference/proof_of_concept.example_module.html#classes",
    "href": "reference/proof_of_concept.example_module.html#classes",
    "title": "proof_of_concept.example_module",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nValuesDivideTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\nValuesTimesTwo\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndivide_two\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.divide_two(dataframe)\nVermenigvuldigd de meetstation waardes met 2 als voorbeeld\n\n\n\nproof_of_concept.example_module.ValuesDivideTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo()\nVoorbeeld class die laat zien hoe de arcitectuur werkt\nArgs: data_adapter: DataAdapter Leest\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nRunt de funcies en stuur de df terug\n\n\ntimes_two\nDeelt de meetstation waardes door 2 als voorbeeld\n\n\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.run(input, output)\nRunt de funcies en stuur de df terug\n\n\n\nproof_of_concept.example_module.ValuesTimesTwo.times_two(dataframe)\nDeelt de meetstation waardes door 2 als voorbeeld"
  },
  {
    "objectID": "reference/loads.LoadsWaterinfo.html",
    "href": "reference/loads.LoadsWaterinfo.html",
    "title": "loads.LoadsWaterinfo",
    "section": "",
    "text": "loads.LoadsWaterinfo()\nBelasting gegevens ophalen van rijkswaterstaat Waterinfo https://waterinfo.rws.nl/#/publiek/waterhoogte\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput_schema\ndict() -&gt; new empty dictionary\n\n\nurl\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\n\n\nget_maptype\nbepaal welke schema gebruikt moet worden voor het ophalen van de belasting\n\n\nget_value_by_observedhours\nbepaal welke range gebruikt moet worden voor het ophalen van de belasting\n\n\nrun\nDe runner van de Belasting Waterinfo functie.\n\n\n\n\n\nloads.LoadsWaterinfo.create_dataframe(options, maptype_schema, measuringstation, json_data)\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\nArgs: options (dict): options opgegeven in de yaml maptype_schema (dict): gegevens van de maptype measuringstation (dict): gegevens van het meetstation json_data (str): JSON data met opgehaalde belasting data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer: definition: - Meetlocatie id (measurement_location_id) - Meetlocatie code (measurement_location_code) - Meetlocatie omschrijving/naam (measurement_location_description) - Parameter id overeenkomstig Aquo-standaard: ‘4724’ (parameter_id) - Parameter code overeenkomstig Aquo-standaard: ‘WATHTE’ (parameter_code) - Parameter omschrijving overeenkomstig Aquo-standaard: ‘Waterhoogte’ (parameter_description) - Eenheid (unit) - Datum en tijd (date_time) - Waarde (value) - Type waarde: meting of verwachting (value_type)\n\n\n\nloads.LoadsWaterinfo.get_maptype(maptype)\nbepaal welke schema gebruikt moet worden voor het ophalen van de belasting\nArgs: maptype (str): maptypes: - waterhoogte, - wind, - golfhoogte, - watertemperatuur, - luchttemperatuur, - astronomische-getij, - waterafvoer, - zouten\nreturns: de query van de range als string. voorbeeld: -48,0\n\n\n\nloads.LoadsWaterinfo.get_value_by_observedhours(maptype_schema, observedhours_moments)\nbepaal welke range gebruikt moet worden voor het ophalen van de belasting\nArgs: maptype_schema (dict): schema met mogelijke ranges. Voorbeeld: {“observedhours”: 48, “predictionhours”: 48, “query”: “-48,0”}, {“observedhours”: 6, “predictionhours”: 3, “query”: “-6,0”}, {“observedhours”: 216, “predictionhours”: 48, “query”: “-216,0”}, {“observedhours”: 672, “predictionhours”: 0, “query”: “-672,0”} observedhours_moments (int): het laagste moment.\nreturns: de query van de range als string. voorbeeld: -48,0\n\n\n\nloads.LoadsWaterinfo.run(input, output)\nDe runner van de Belasting Waterinfo functie.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nstr\nNaam van de dataadapter met invoergegevens.\nrequired\n\n\noutput\nstr\nNaam van de dataadapter om uitvoergegevens op te slaan.\nrequired"
  },
  {
    "objectID": "reference/loads.LoadsWaterinfo.html#attributes",
    "href": "reference/loads.LoadsWaterinfo.html#attributes",
    "title": "loads.LoadsWaterinfo",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput_schema\ndict() -&gt; new empty dictionary\n\n\nurl\nstr(object=’’) -&gt; str"
  },
  {
    "objectID": "reference/loads.LoadsWaterinfo.html#methods",
    "href": "reference/loads.LoadsWaterinfo.html#methods",
    "title": "loads.LoadsWaterinfo",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\n\n\nget_maptype\nbepaal welke schema gebruikt moet worden voor het ophalen van de belasting\n\n\nget_value_by_observedhours\nbepaal welke range gebruikt moet worden voor het ophalen van de belasting\n\n\nrun\nDe runner van de Belasting Waterinfo functie.\n\n\n\n\n\nloads.LoadsWaterinfo.create_dataframe(options, maptype_schema, measuringstation, json_data)\nMaak een pandas dataframe van de opgehaalde data uit Waterinfo\nArgs: options (dict): options opgegeven in de yaml maptype_schema (dict): gegevens van de maptype measuringstation (dict): gegevens van het meetstation json_data (str): JSON data met opgehaalde belasting data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer: definition: - Meetlocatie id (measurement_location_id) - Meetlocatie code (measurement_location_code) - Meetlocatie omschrijving/naam (measurement_location_description) - Parameter id overeenkomstig Aquo-standaard: ‘4724’ (parameter_id) - Parameter code overeenkomstig Aquo-standaard: ‘WATHTE’ (parameter_code) - Parameter omschrijving overeenkomstig Aquo-standaard: ‘Waterhoogte’ (parameter_description) - Eenheid (unit) - Datum en tijd (date_time) - Waarde (value) - Type waarde: meting of verwachting (value_type)\n\n\n\nloads.LoadsWaterinfo.get_maptype(maptype)\nbepaal welke schema gebruikt moet worden voor het ophalen van de belasting\nArgs: maptype (str): maptypes: - waterhoogte, - wind, - golfhoogte, - watertemperatuur, - luchttemperatuur, - astronomische-getij, - waterafvoer, - zouten\nreturns: de query van de range als string. voorbeeld: -48,0\n\n\n\nloads.LoadsWaterinfo.get_value_by_observedhours(maptype_schema, observedhours_moments)\nbepaal welke range gebruikt moet worden voor het ophalen van de belasting\nArgs: maptype_schema (dict): schema met mogelijke ranges. Voorbeeld: {“observedhours”: 48, “predictionhours”: 48, “query”: “-48,0”}, {“observedhours”: 6, “predictionhours”: 3, “query”: “-6,0”}, {“observedhours”: 216, “predictionhours”: 48, “query”: “-216,0”}, {“observedhours”: 672, “predictionhours”: 0, “query”: “-672,0”} observedhours_moments (int): het laagste moment.\nreturns: de query van de range als string. voorbeeld: -48,0\n\n\n\nloads.LoadsWaterinfo.run(input, output)\nDe runner van de Belasting Waterinfo functie.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nstr\nNaam van de dataadapter met invoergegevens.\nrequired\n\n\noutput\nstr\nNaam van de dataadapter om uitvoergegevens op te slaan.\nrequired"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Toolbox continu inzicht",
    "section": "",
    "text": "Waterkeringbeheerders zijn gewend om hun waterkeringen te laten voldoen aan vastgestelde normen: daar baseren ze het ontwerp en hun beheer en onderhoud op. In een situatie met extreme droogte of extreem hoge waterstanden is er meer nodig. Dan is het belangrijk continu inzicht te hebben in de actuele risico’s voor het gebied in de eerstvolgende dagen. De methode ‘continu inzicht’ is precies daarop gericht: ervoor zorgen dat de beheerder 24/7 in control is. Met slimme monitoring en rekenmodellen wordt de actuele situatie geanalyseerd. De beheerder ziet hoe groot het risico is en waar de zwakke plekken zitten, zodat hij of zij gericht maatregelen kan nemen. De ‘Toolbox continu inzicht’ is door HKV lijn in water ontwikkeld voor waterschappen en Rijkswaterstaat. Door middel van deze toolbox worden de systemen achter ‘continu inzicht’ herontwikkeld in python en open source aangeboden."
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html",
    "href": "examples/notebooks/proof_of_concept.html",
    "title": "Voorbeelden",
    "section": "",
    "text": "Hieronder wordt één voorbeeld gegeven van hoe de architectuur werkt. Er zullen later nog meer voorbeelden aan toegevoegd worden.  Meer voorbeelden met de juiste data en configuratie bestanden zijn te vinden op github onder toolbox-continu-inzicht/tests/.",
    "crumbs": [
      "Voorbeelden"
    ]
  },
  {
    "objectID": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "href": "examples/notebooks/proof_of_concept.html#voorbeeld-met-csv",
    "title": "Voorbeelden",
    "section": "Voorbeeld met CSV",
    "text": "Voorbeeld met CSV\nLees de configuratie in:\nDit leest een configuratie bestand test_config.yaml in:\nGlobalVariables:\n    rootdir: \"data_sets\"\n\nDataAdapter:\n    default_options:\n        postgresql_database:\n            database: \"citoolbox\"\n            schema: \"citoolbox_schema\"\n    \n    my_csv_in: \n        type: csv\n        file: \"test_csv_in.csv\"\n    my_csv_out: \n        type: csv\n        file: \"test_csv_out.csv\"\n    my_postgresql: \n        type: postgresql_database\n        table: data\n\n...\n\nc = Config(config_path=\"data_sets/test_config.yaml\")\nc.lees_config()\n\nZet de data adapter klaar en geef deze de configuratie mee\n\nfrom toolbox_continu_inzicht import DataAdapter\n\ndata = DataAdapter(config=c)\n\nRun de module met CSV\n\nfrom toolbox_continu_inzicht.proof_of_concept import ValuesTimesTwo\n\nkeer_twee = ValuesTimesTwo(data_adapter=data)\n\n\nkeer_twee.run(input=\"my_csv_in\", output=\"my_csv_out\")\n\n\nkeer_twee.df_in\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndate_time\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n4.8\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n5.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n5.2\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n5.4\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n5.6\n\n\n\n\n\n\n\n\nkeer_twee.df_out\n\n\n\n\n\n\n\n\nobjectid\nobjecttype\nparameterid\ndate_time\nvalue\n\n\n\n\n0\n1\nmeasuringstation\n1\n1726227377000\n9.6\n\n\n1\n2\nmeasuringstation\n1\n1726227377000\n10.0\n\n\n2\n3\nmeasuringstation\n1\n1726227377000\n10.4\n\n\n3\n4\nmeasuringstation\n1\n1726227377000\n10.8\n\n\n4\n5\nmeasuringstation\n1\n1726227377000\n11.2\n\n\n\n\n\n\n\nde values waardes uit de vorige table zijn vermenigvuldigd met twee\nZelf proberen? Dit voorbeeld is te vinden op Github",
    "crumbs": [
      "Voorbeelden"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Alle noemenswaardige veranderingen worden hier bijgehouden. Dit project gebruikt Semantic Versioning. Het format is beschreven op keepachangelog.com.\n\n\n\n\n\nWerkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19\n\n\n\n\nIn sprint 2 is gebruikt gemaakt van aparte ‘feature branches’ met een grote pull request naar main #36.\nAllereerst zijn er nog restpunten uit sprint 1 aangepast:\n\nhet specificeren van delimiter deed het niet, dit moet sep zijn. Daarnaast worden nu alle opties die in de configuratie zijn gespecificeerd doorgegeven aan de data adapters.\npath is nu file, waarbij file altijd een bestand is in de rootdir, Path mag ook een ander absoluut pad zijn: bijvoorbeeld een bestand op een andere locatie. Er wordt ook gecheckt of de paden bestaan voor het runnen van een functie.\n.env bestand is niet meer verplicht, maar geeft wel een warning\nutil map voor generieke functies als tijd en post/get functies\npytest.skipif voor testen die alleen op het HKV-netwerk draaien door FEWS/postgreSQL verbindingen.\nde keywords input=.. en output=.. worden nu alleen aan de .run() functie doorgegeven, niet aan de class zelf.\n\nDaarnaast is er een hoop toegevoegd rondom het inlezen van belastingen:\n\nInlezen van, ophalen van locaties, parameters en grenswaardes(waar mogelijk) uit:\n\n(Noos/Vitaal) Matroos\nFEWS\nRWS waterinfo\nRWS waterwebservices\n\n\nDeze inleesfuncties gebruiken allemaal de Aquo-standaard naam en code (WATHTE).\n\nClassificeren van belastingen aan de hand van opgehaalde/opgegeven grenswaardes.\nToekennen van belastingen aan secties.\nAggregeren van tijdreeksen naar momenten of bij het getij naar maxima over de getijperiode.",
    "crumbs": [
      "Overig",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#ongeplubliceerd",
    "href": "changelog.html#ongeplubliceerd",
    "title": "Changelog",
    "section": "",
    "text": "Werkende Quarto documentatie #7\nProof of concept met csv en database #9\nVoeg notebook toe om te laten zien hoe het werkt #12\nMaak map structuur overzichtelijker #19\n\n\n\n\nIn sprint 2 is gebruikt gemaakt van aparte ‘feature branches’ met een grote pull request naar main #36.\nAllereerst zijn er nog restpunten uit sprint 1 aangepast:\n\nhet specificeren van delimiter deed het niet, dit moet sep zijn. Daarnaast worden nu alle opties die in de configuratie zijn gespecificeerd doorgegeven aan de data adapters.\npath is nu file, waarbij file altijd een bestand is in de rootdir, Path mag ook een ander absoluut pad zijn: bijvoorbeeld een bestand op een andere locatie. Er wordt ook gecheckt of de paden bestaan voor het runnen van een functie.\n.env bestand is niet meer verplicht, maar geeft wel een warning\nutil map voor generieke functies als tijd en post/get functies\npytest.skipif voor testen die alleen op het HKV-netwerk draaien door FEWS/postgreSQL verbindingen.\nde keywords input=.. en output=.. worden nu alleen aan de .run() functie doorgegeven, niet aan de class zelf.\n\nDaarnaast is er een hoop toegevoegd rondom het inlezen van belastingen:\n\nInlezen van, ophalen van locaties, parameters en grenswaardes(waar mogelijk) uit:\n\n(Noos/Vitaal) Matroos\nFEWS\nRWS waterinfo\nRWS waterwebservices\n\n\nDeze inleesfuncties gebruiken allemaal de Aquo-standaard naam en code (WATHTE).\n\nClassificeren van belastingen aan de hand van opgehaalde/opgegeven grenswaardes.\nToekennen van belastingen aan secties.\nAggregeren van tijdreeksen naar momenten of bij het getij naar maxima over de getijperiode.",
    "crumbs": [
      "Overig",
      "Changelog"
    ]
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "De Toolbox Continu Inzicht wordt incrementeel ontwikkeld. De IT-ontwikkeling is opgedeeld in sprintblokken. Binnen elk sprintblok worden één of meerdere modules ontwikkeld. Voor elke module worden Python-scripts ontwikkeld waarmee een functie kan worden uitgevoerd. Een voorbeeld van een functie is het inlezen van waterstanden uit FEWS. De scripts en de code (inclusief documentatie) worden na het afronden van iedere sprint gepubliceerd op deze Wikipagina en een publieke Github. De scripts worden vrijgegeven nadat deze succesvol het testprotocol hebben doorlopen.\nDe ontwikkeling van de volgende modules is voorzien:",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-architectuur",
    "href": "modules.html#sec-architectuur",
    "title": "Modules",
    "section": "Basis architectuur Toolbox Continu Inzicht",
    "text": "Basis architectuur Toolbox Continu Inzicht\nDe architectuur van de Toolbox Continu Inzicht is ontworpen om flexibel te zijn.\n\nConfiguratie\nPer systeem kunnen de wensen van de gebruiker veranderen. Het systeem is dan ook te configureren voor verschillende databronnen. Door middel van een yaml configuratiebestand wordt de juist informatie meegegeven aan de modules en de data adapter.\nHet kopje GlobalVariables is verplicht met minimaal een rootdir: dit is een map waarin de data bestanden staan en weggeschreven worden. De DataAdapter is ook verplicht, met minimaal één data adapter. De naam van de data adapter is vrij te kiezen. Er kunnen zoveel data adapters aangemaakt worden, als gewenst.\nGlobalVariables:\n    rootdir: \"C:/data/toobox/\"\n\nDataAdapter:\n    EenTypeDataAdapter: \n        type: csv\n        file: \"eerste_voorbeeld.csv\"\nOnder GlobalVariables kan per datatype een variabele worden meegegeven die voor alle adapters van dit type gelden. Voor csv kan dit bijvoorbeeld het scheidingsteken zijn. Alle data adapters met het type csv krijgen nu de extra variabele mee.\nGlobalVariables:\n    rootdir: \"C:/data/toobox/\"\n\nDataAdapter:\n    default_options:\n        csv:\n            sep: \";\"\n    EenTypeDataAdapter: \n        type: csv\n        file: \"eerste_voorbeeld.csv\"\n    CSV_output: \n        type: csv\n        file: \"voorbeeld_output.csv\"\nNaast de data adapters worden modules ook geconfigureerd in de GlobalVariables. Zo worden de opties voor de module LoadsMatroos ook mee gegeven in de GlobalVariables.\nGlobalVariables:\n    rootdir: \"C:/data/toobox/\"\n    \n    LoadsMatroos:\n        website: \"noos\"\n        source: \"dcsm6_kf\"\n        parameters: [\"waterlevel\"]\n        MISSING_VALUE: 999\n\nDataAdapter:\n    ...\nDe tijd waarop de berekening van de toolbox plaatsvindt is ook te configureren met calc_time. Deze tijd moet in het ISO 8601 format zijn en wordt uitgelezen met datetime.datetime.fromisoformat. Indien geen tijd wordt meegegeven, maakt de Config klasse deze zelf aan met het tijdstip van runnen.\nGlobalVariables:\n    rootdir: \"C:/data/toobox/\"\n    calc_time: '2024-11-18 08:00:00'\n    \n    LoadsMatroos:\n        website: \"noos\"\n        source: \"dcsm6_kf\"\n        parameters: [\"waterlevel\"]\n        MISSING_VALUE: 999\n\nDataAdapter:\n    ...\n\n\nData adapter\nDe data adapter wordt gebruikt om verschillende datatypes in en uit te lezen. Op dit moment zijn dit de volgende data formaten:\n\nCSV\nNetCDF\nPostgreSQL\n\nDeze wordt geconfigureerd in de een .yaml configuratiebestand. Een voorbeeld van een csv-bestand wordt hieronder weergegeven. Hierbij zijn type en file of path verplicht. In het voorbeeld hieronder wordt een relatief pad meegegeven als rootdir, dit wordt ook ondersteund.\nGlobalVariables:\n    rootdir: \"data_sets\"\n\nDataAdapter:\n    my_csv_in: \n        type: csv\n        file: \"test_csv_in.csv\"\n    my_csv_out: \n        type: csv\n        file: \"test_csv_out.csv\"\n...\nIndien een bestand buiten de root directory valt kan in plaats van file ook een absoluut path worden meegegeven.\nDataAdapter:\n    MyCSV_anders: \n        type: csv\n        path: \"C:/data/Ander/pad_naar_csv.csv\"\n...\nNaast de verplichte waardes van een data adapter, worden ook alle overige opties doorgegeven. Voor de generieke data adapters is er een check of de extra opgegeven opties ondersteund worden. Zo maakt de csv data adapter gebruik van pandas.read_csv en de NetCDF data adapter xarray.open_dataset. Voor PostgreSQL zijn alleen drie standaard opties beschikbaar: database, schema en table.\n\nAdapters aanmaken vanuit Python\nNaast het definiëren van data adapters via het configuratiebestand, kan dit ook vanuit Python zelf gedaan worden met de functie set_dataframe_adapter.\nDit kan op twee manieren:\n\nDe data adapter wordt vooraf in de configuratie opgegeven met het type Python. De functie geeft het desbetreffende dataframe door.\nEr is geen data adapter gedefinieerd. Deze wordt aangemaakt bij het runnen van de code. Let op: het configuratiebestand verandert niet mee.\n\nOptie 1:\n\nConfiguratieCode\n\n\nGlobalVariables:\n    rootdir: \"data_sets\"\n\nDataAdapter:\n    my_df_in: \n        type: python\n...\n\n\nconfig = Config(config_path=\"config.yaml\")\nconfig.lees_config()\ndata_adapter = DataAdapter(config=config)\ndata_adapter.set_dataframe_adapter(\"my_df_in\", input_df, if_not_exist=\"raise\")\n...\n\n\n\nOptie 2:\n\nConfiguratieCode\n\n\nGlobalVariables:\n    rootdir: \"data_sets\"\n\nDataAdapter:\n    my_csv_in: \n        type: csv\n        file: \"test_csv_in.csv\"\n...\n\n\nconfig = Config(config_path=\"config.yaml\")\nconfig.lees_config()\ndata_adapter = DataAdapter(config=config)\ndata_adapter.set_dataframe_adapter(\"my_new_data_adapter\", input_df, if_not_exist=\"create\")\n\n\n\n\n\n\nWachtwoorden\nVoor bepaalde diensten - zoals het toegang krijgen tot een database - is een wachtwoord vereist. Deze kunnen in de “environmental variables” worden meegegeven, in de vorm van een .env bestand.\npostgresql_host=\"xxx.xx.xx.xx\"\npostgresql_database=\"xxxxxxx\"\npostgresql_port=\"xxxx\"\npostgresql_password=\"xxxx\"\npostgresql_user=\"xx\"",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#sec-belastingen",
    "href": "modules.html#sec-belastingen",
    "title": "Modules",
    "section": "Belastingen inlezen en classificeren",
    "text": "Belastingen inlezen en classificeren\nIn inzicht te krijgen in de veiligheid van waterkeringen is het van belang om de belastingen op de waterkeringen in kaart te brengen. Dit kunnen waterstanden op het buitenwater (zee, rivieren of meren) zijn, maar ook grondwaterstanden. De belastingen worden eerst ingelezen uit verschillende databronnen en vervolgens geclassificeerd. De belastingen worden ingelezen voor verschillende momenten (bijv. gister, nu, morgen of overmorgen etc.), zodat naast metingen ook voorspellingen van belastingen worden ingelezen.\n\nBelastingen inlezen\nDe volgende databronnen worden op dit moment in de Toolbox Continu Inzicht ondersteund:\n\nDelft-FEWS\n(Noos)Matroos\nRWS waterwebservices\nRWS waterinfo\n\n\nDelft-FEWS\nVeel waterschappen gebruiken een Delft - Forecast Early Warning System (FEWS) implementatie voor het beheren van verschillende interne en externe informatiebronnen. Via de REST API van FEWS kunnen verschillende belastingen worden ingelezen. Toegang verkrijgen tot een FEWS is complexer dan andere bronnen, waardoor het noodzakelijk is om extra parameters te definiëren in het configuratiebestand. De functie get_fews_locations() kan worden gebruikt om de beschikbare locaties te tonen.\nGlobalVariables:\n    rootdir: \"data_sets\"  \n    moments: [-24,0,24,48]\n    \n\n    LoadsFews:\n        host: \"https:**********\"\n        port: ****\n        region: \"fewspiservice\"\n        version: \"1.25\"\n        filter: \"HKV_WV_1\"\n        parameters: [\"WNSHDB1\"]  \n        \n\nDataAdapter:\n    ...\n\nGlobalVariables:\n\nrootdir: Bestandslocatie van de invoer- en uitvoerbestanden\nmoments: Momenten in uren waar gegevens voor opgehaald moet worden (bijv. -24, 0, +24, +48, +72 uur)\n\n\n\nLoadsFews:\n\nhost: Fews PI REST url\nport: Fews PI REST poortnummer\nregion: FEWS PI REST regionaam\nversion: FEWS PI versienummer\nfilter: Filternaam zoals deze in FEWS wordt gebruikt\nparameters: Parameternaam zoals deze in FEWS wordt gebruikt\n\n\n\nInvoer schema locaties:\n\nmeasurement_location_id (int): Meetlocatie id\nmeasurement_location_code (str): Meetlocatie code\nmeasurement_location_description (str): Meetlocatie omschrijving/naam\n\n\n\nUitvoer schema:\n\nmeasurement_location_id (int): Meetlocatie id\nmeasurement_location_code (str): Meetlocatie code\nmeasurement_location_description (str): Meetlocatie omschrijving/naam\nparameter_id (int): Parameter id overeenkomstig Aquo-standaard\nparameter_code (str): Parameter code overeenkomstig Aquo-standaard\nparameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard\nunit (str): Eenheid van de waarde\ndate_time (datetime): Datum en tijd van de waarde\nvalue (float): Waarde\nvalue_type (str): Type waarde: meting of verwachting\n\n\n\n\nMatroos\nMatroos of Multifunctional Access Tool for Operational Oceandata Services is een webbased distributiesysteem van de operationele verwachtingen van waterstanden, stroming, debieten en golven, van onder meer het Watermanagementcentrum Nederland. Matroos is beschikbaar voor verschillende doelgroepen, waarvan er - op dit moment - drie relevant zijn voor de ontwikkeling van de Toolbox Continu Inzicht. De verschillende versies worden in de tabel hieronder toegelicht. Voor meer informatie verwijzen we naar de nieuwsbrief op iplo.nl. In de Toolbox wordt nu alleen de series API gebruikt dus volstaat NOOS.\n\n\n\nURL\nType\nInhoud\nDoelgroep\n\n\n\n\nvitaal.matroos.rws.nl\nextern, vitaal\n21 dagen\nKustwacht, Waterschappen\n\n\nmatroos.rws.nl\nextern\nVolledige historie\nWaterschappen, universiteiten, externe\n\n\nnoos.matroos.rws.nl\nextern, open\nBeperkte set; series:volledig; maps: 14 dagen\nNOOS internationaal, Open Data\n\n\n\nIn Matroos zijn verschillende bronnen beschikbaar, met get_matroos_sources() kan een lijst van deze worden gegeneerd. De beschikbare locaties kunnen worden weergegeven met get_matroos_locations(), met mogelijkheid om te filteren op een bron en parameter.\n\nGlobalVariables:\n    rootdir: \"data_sets\" \n    moments: [-24,0,24,48]\n    ...\n\n    LoadsMatroos:\n        website: \"noos\" # noos, vitaal of matroos\n        model: \"observed\"\n        parameters: [\"WATHTE\"]\n\nDataAdapter:\n    ...\nVoor het gebruik van vitaal.matroos en matroos is een gebruikersnaam en wachtwoord nodig. Deze moeten in de environmental variables worden meegegeven (.env bestand).\nvitaal_user: \"...\"\nvitaal_password: \"...\"\n# of \nmatroos_user: \"...\"\nmatroos_password: \"...\"\n\n\nRWS WaterWebservices\nVia de RWS WaterWebservices zijn metingen en verwachtingen van o.a. waterstanden beschikbaar via de WaterWebservices API. Vooral langs de rivieren zijn veel meetpunten beschikbaar. Deze API is openbaar en vereist weinig configuratie. De MISSING_VALUE kan in de configuratie worden aangepast, maar staat al standaard ingesteld.\n    LoadsWaterwebservicesRWS:\n        parameters:  [\"WATHTE\"]\nBeschikbare locaties kunnen worden weergegeven met get_rws_webservices_locations().\n\n\nRWS Waterinfo\nNaast de RWS WaterWebservices is alle informatie van Rijkswaterstaat ook verkrijgbaar via waterinfo.rws.nl. Waterinfo is bedoelt als informatie portaal, en niet als API om data op te halen. Voordat de WaterWebservices API beschikbaar was, werd de Waterinfo website gebruikt in verschillende Continu Inzicht systemen. Om de comptabiliteit met deze oudere Continu Inzicht systemen te behouden, is deze functie nu nog wel beschikbaar in de Toolbox Continu Inzicht. Wel is in de toekomst mogelijk dat door veranderingen aan de waterinfo website, deze ondersteuning komt te vervallen.\n GlobalVariables:\n    rootdir: \"data_sets\"\n    moments: [-24,48]\n\n    LoadsWaterinfo:\n        parameters: [\"waterhoogte\"]\nOmdat data ophalen uit waterinfo gevoeliger is, worden de verschillende parameters hieronder weergegeven.\n\nWaterhoogteWindsnelheidGolfhoogteWatertemperatuurLuchttemperatuurAstronomisch getijStroomsnelheidDebietChloride\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nWaterhoogte in cm\nwaterhoogte\n2d terug, 2d vooruit: -48,486u terug, 3u vooruit: -6,39d terug, 2d vooruit: -216,4828d terug: -672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nWindsnelheid in m/s\nwind\n2d terug: -48,486u terug: -6,39d terug: -216,4828d terug: -672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nGolfhoogte in cm\ngolfhoogte\n2d terug, 2d vooruit: -48,486u terug, 3u vooruit: -6,39d terug, 2d vooruit: -216,4828d terug: -672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nWatertemperatuur in °C\nwatertemperatuur\n2d terug: -48,06u terug: -6,09d terug: -216,028d terug:-672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nLuchttemperatuur in °C\nluchttemperatuur\n2d terug: -48,06u terug: -6,09d terug: -216,028d terug:-672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nAstronomisch getij\nastronomische-getij\n2d terug, 2d vooruit: -48,486u terug, 3u vooruit:-6,39d terug, 2d vooruit: -216,4828d terug:-672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nStroomsnelheid in m/s\nstroming\n2d terug: -48,06u terug:-6,09d terug: -216,028d terug:-672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nDebiet in m3/s\nwaterafvoer\n2d terug, 2d vooruit: -48,486u terug, 3u vooruit: -6,39d terug, 2d vooruit:-216,4828d terug:-672,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nomschrijving\nmaptype\nperiode\n\n\n\n\nChloride in mg/l\nzouten\n2d terug: -48,06u terug: -6,09d terug: -216,028d terug:-672,0\n\n\n\n\n\n\n\n\nInvoer schema locaties:\n\nmeasurement_location_id (int): Meetlocatie id\nmeasurement_location_code (str): Meetlocatie code\nmeasurement_location_description (str): Meetlocatie omschrijving/naam\n\n\n\nUitvoer schema:\n\nmeasurement_location_id (int): Meetlocatie id\nmeasurement_location_code (str): Meetlocatie code\nmeasurement_location_description (str): Meetlocatie omschrijving/naam\nparameter_id (int): Parameter id overeenkomstig Aquo-standaard\nparameter_code (str): Parameter code overeenkomstig Aquo-standaard\nparameter_description (str): Parameter omschrijving overeenkomstig Aquo-standaard\nunit (str): Eenheid van de waarde\ndate_time (datetime): Datum en tijd van de waarde\nvalue (float): Waarde\nvalue_type (str): Type waarde: meting of verwachting\n\n\n\n\n\nClassificeren van belastingen\nDe verschillende hierboven benoemde functies voor het inlezen van belastingen geven een tijdreeks terug op bepaalde punten. Deze kunnen omgezet worden naar moment, geclassificeerd met grenswaardes en toegekend aan dijkvakken.\n\nTijdreeks naar momenten\nDe ingelezen tijdsreeks met belastingen wordt omgezet naar belastingen op specifieke momenten met LoadsToMoments.\nVoor gebieden waar het getij van invloed is, is een aanvullende configuratie nodig. Bij getij wordt de maximale belasting tijdens een getijdencyclus (+/-12.25 uur) bepaald. Zonder deze configuratie wordt de belasting exact op het vooraf gedefinieerde moment bepaald.\n\nConfiguratieCode\n\n\nGlobalVariables:\n    rootdir: \"data_sets\"\n    moments: [-24,0,24,48]\n\n    LoadsToMoments:\n        tide: true\n\nDataAdapter: \n    default_options:\n        csv:\n            sep: \",\"\n    waterstanden_waterinfo: \n        type: csv\n        path: \"waterstanden_waterinfo.csv\"\n    waterstanden_waterinfo_maxima:   \n        type: csv\n        path: \"waterstanden_waterinfo_maxima.csv\" \n\n\nfrom toolbox_continu_inzicht import Config, DataAdapter\nfrom toolbox_continu_inzicht.loads import LoadsToMoments\n\nconfig = Config(config_path=\"config.yaml\")\nconfig.lees_config()\ndata_adapter = DataAdapter(config=config)\nmoments = LoadsToMoments(data_adapter=data_adapter)\nmoments.run(input=\"waterstanden_waterinfo\", output=\"waterstanden_waterinfo_maxima\")\n\n\n\n\n\nClassificeren van belastingen\nMet LoadsClassify kunnen met vooraf gedefinieerde grenswaardes de belastingen worden geclassificeerd, bijvoorbeeld als waterstand die 1 keer per 100 jaar voorkomt. Hierbij moeten de data adapters van de grenswaardes en belastingen worden doorgegeven in een lijst. Hierbij is de volgorde van de lijst belangrijk: eerst grenswaardes en dan belastingen. De belastingen moeten voor het classificeren aangeleverd worden als moment waardes.\n\nConfiguratieCode\n\n\nGlobalVariables:\n    rootdir: \"data_demo\" \n    moments: [-24,0,24,48]  \n\n    LoadsMaxima:\n        tide: False   \n\nDataAdapter: \n    default_options:\n        csv:\n            sep: \",\"\n    waterstanden_waterinfo_maxima:   \n        type: csv\n        path: \"waterstanden_waterinfo_maxima.csv\" \n    waterinfo_klassengrenzen: \n        type: csv\n        path: \"klassengrenzen.csv\"    \n    waterstanden_waterinfo_klassen: \n        type: csv\n        path: \"waterstanden_waterinfo_klassen.csv\"    \n\n\nfrom toolbox_continu_inzicht import Config, DataAdapter\nfrom toolbox_continu_inzicht.loads import LoadsClassify\n\nconfig = Config(config_path=\"config.yaml\")\nconfig.lees_config()\ndata_adapter = DataAdapter(config=config)\nclassify = LoadsClassify(data_adapter=data_adapter)\nclassify.run(\n    input=[\"waterinfo_klassengrenzen\", \"waterstanden_waterinfo_maxima\"],\n    output=\"waterstanden_waterinfo_klassen\",\n)\n\n\n\n\n\nToekennen van belastingen aan secties\nDe belastingen zijn nu beschikbaar op de meetlocaties van FEWS, Matroos, RWS Waterinfo of RWS WaterWebServices. De volgende stap is het vertalen van de belastingen in de meetpunten naar de secties (dijkvakken of kunstwerken) via SectionsLoads. Voor het toekennen van belastingen aan secties zijn drie data bronnen nodig: de dijkvakken, de belastingen en een koppeling tussen dijkvakken en belastinglocaties. De drie data adapters worden vervolgens doorgegeven aan als een lijst. Hierbij is de eerder genoemde volgorde van belang: dijkvakken, belastingen en koppeling dijkvakken en belastinglocaties. Als een sectie tussen twee meetpunten ligt, wordt een interpolatiealgoritme (bijv. 25% waarde in meetpunt 1 + 75% waarde in meetpunt 2) toegepast. Omdat dit lokaal kan verschillen hoe deze interpolatie wordt gemaakt, is er geen automatische script voor. De interpolatie moet dus vooraf gedefinieerd worden door de gebruiker en wordt mee gegeven bij de koppeling tussen dijkvakken en belastinglocaties. Hierbij wordt gebruikt gemaakt van fractionup en fractiondown om het gewicht van de bovenstroomse en benedenstroomse belastinglocatie te bepalen.\n\nConfiguratieCode\n\n\nGlobalVariables:\n    rootdir: \"data_demo\"  \n    moments: [-24,0,24,48]\n    \n    SectionsLoads:\n        MISSING_VALUE: -9999.0 \n\nDataAdapter: \n    default_options:\n        csv:\n            sep: \",\"\n    dijkvakken: \n        type: csv\n        path: \"dijkvakken.csv\"   \n    waterstanden: \n        type: csv\n        path: \"waterstanden_waterinfo.csv\"\n    koppeling_dijkvak_belastinglocatie: \n        type: csv\n        path: \"dijkvak_belastinglocatie.csv\"   \n    waterstanden_per_dijkvak: \n        type: csv\n        path: \"waterstanden_per_dijkvak.csv\"  \n\n\nfrom toolbox_continu_inzicht import Config, DataAdapter\nfrom toolbox_continu_inzicht.sections import SectionsLoads\n\nconfig = Config(config_path=\"config.yaml\")\nconfig.lees_config()\ndata_adapter = DataAdapter(config=config)\nsections_loads = SectionsLoads(data_adapter=data_adapter)\nsections_loads.run(\n    input=[\"dijkvakken\", \"waterstanden\", \"koppeling_dijkvak_belastinglocatie\"],\n    output=\"waterstanden_per_dijkvak\",\n)",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Het ontwikkelen van de toolbox continu inzicht bestaat uit twee delen. Eerst ontwikkelt HKV de basisfunctionaliteit. Deze ontwikkeling is voor iedereen te volgen op GitHub, maar toevoegingen worden nog niet geaccepteerd. Daarna blijft het project open source beschikbaar en kan het verder worden ontwikkeld. De term ‘ontwikkelaars’ duidt in de eerste ontwikkelfase op het team van HKV, later op anderen die een bijdrage willen leveren. Een bijdrage kan uiteenlopen van een vraag tot een grote wijziging via een pull request.\nEen bijdrage kan een van de volgend zaken zijn:\n\nJe hebt een vraag\nJe denkt een probleem (bug) te hebben gevonden (of onverwachte functionaliteit)\nJe wilt een aanpassing maken (bug fixen, nieuwe functionaliteit, update aan de documentatie)\nJe wilt een nieuwe versie publiceren\n\nDe onderstaande secties behandelen de stappen per geval.\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg het \"Question” label toe; voeg andere labels toe waar nodig.\n\n\n\n\n\nGebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.\n\n\n\n\n\n(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeldconfiguratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest.\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests toe.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor anderen.\nPush je branch. naar (jouw fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests die worden ontvangen, krijgen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je tests schrijft of runt of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.\n\n\n\nDit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest.\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht op alle acties, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versietag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de GitHub actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-hebt-een-vraag",
    "href": "contributing.html#je-hebt-een-vraag",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan.\nVoeg het \"Question” label toe; voeg andere labels toe waar nodig.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "href": "contributing.html#je-denkt-een-probleem-bug-te-hebben-gevonden",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Gebruik de zoekfunctie hier om te kijken of iemand anders dezelfde vraag/probleem heeft;\nAls je niks vergelijkbaars kan vinden, maak een nieuwe issue aan. Zorg dat je genoeg informatie meegeeft zodat andere ontwikkelaars je probleem begrijpen en genoeg context hebben om je te helpen. Afhankelijk van je probleem, kan je de SHA hashcode van de commit die problemen veroorzaakt toevoegen. Denk daarnaast ook aan versie- en besturingssysteeminformatie.\nVoeg labels toe die relevant zijn voor je probleem.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-aanpassing-maken",
    "href": "contributing.html#je-wilt-een-aanpassing-maken",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "(Belangrijk) Communiceer aan de rest van de ontwikkelaars voor je begint dat je een aanpassing wilt maken. Dit laat je weten door een issue aan te maken.\n(Belangrijk) Bereik consensus over je idee.\nDe hoofdontwikkelaars hebben rechten om nieuwe branches aan te maken. Als je deze rechten niet hebt, maak een 'fork' (kopie) in je eigen account. In deze fork maak je een eigen branch van de laatste commit in main. Probeer om veranderingen die in de tussentijd worden doorgevoerd op main al mee te nemen. Dit doe je door te pullen van de 'upstream' repository, (zie instructies hier en hier);\nVoor Visual Studio Code staat er een voorbeeldconfiguratie.\nInstalleer de benodigde python packages in een pixi omgeving met pixi install, volg de uitleg van de pixi. Pixi zorgt er voor dat iedereen dezelfde versies van python packages heeft.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest.\nZorg dat alle documentatie automatisch genereert met pixi run quarto-render. Quarto is al onderdeel van de zojuist aangemaakte pixi omgeving.\nVoeg bij nieuwe functionaliteit altijd nieuwe tests toe.\nUpdate en voeg documentatie toe. Gebruik Numpy Style Python docstrings. Zorg dat je code leesbaar en begrijpelijk is voor anderen.\nPush je branch. naar (jouw fork van) de toolbox continu inzicht repo op GitHub;\nMaak een pull request aan, bijvoorbeeld volgens deze instructies. Pull requests die worden ontvangen, krijgen altijd een review.\n\nAls je het idee heb dat je iets nuttig heb toegevoegd, maar je weet niet hoe je tests schrijft of runt of hoe je documentatie aanmaakt: geen probleem. Maak een pull request en dan kijken we hoe we kunnen helpen.",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "href": "contributing.html#je-wilt-een-nieuwe-versie-publiceren",
    "title": "Richtlijnen voor bijdragen aan toolbox continu inzicht",
    "section": "",
    "text": "Dit is een stukje voor de hoofdontwikkelaars van toolbox continu inzicht.\n\nCheckout HEAD van de main branch met git checkout main en git pull.\nBeslis welke nieuwe versie (major, minor or patch) gebruikt gaat worden. We gebruiken semantic versioning.\nOmdat je niet direct naar de main branch kan schrijven (protected), maak een nieuwe branch aan met git checkout -b release-&lt;version&gt;.\nIndien dependencies zijn aangepast, maak een nieuw pixi lock bestand.\nPas de versie aan in src/toolbox_continu_inzicht/__init__.py, de pyptoject.toml leest deze uit.\nPas de docs/changelog.qmd aan met de veranderingen. Vergeet de link naar de pull request niet.\nZorg dat de format van je code correct is met pixi run ruff check.\nZorg dat alle bestaande testen werken met pixi run pytest.\nCommit & push je aanpassingen naar GitHub.\nMaak een pull request aan, laat iemand het reviewen, wacht op alle acties, deze worden groen, en merge de pull request.\nWacht tot de GitHub-acties op de main branch klaar zijn en er een groen vinkje bij staat.\nMaak een nieuwe 'release' aan op GitHub\n\nGebruik de versie als titel en pas een versietag toe.\nAls beschrijving gebruik de intro van de README.md en veranderingen uit de changelog.qmd.\n\nCheck\n\nIs de wiki bijgewerkt?\nHeeft de GitHub actie alles naar PyPI gestuurd?\nWerkt de nieuwe versie met: pip3 install toolbox_continu_inzicht==&lt;new version&gt;?\n\nVier je nieuwe versie!",
    "crumbs": [
      "Bijdragen",
      "Richtlijnen voor bijdragen aan toolbox continu inzicht"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installatie-instructies",
    "section": "",
    "text": "De Toolbox continu inzicht kan op verschillende manieren worden gebruikt:\n\nAls vervanging van de huidige Continu Inzicht back-end\nAls losstaande modules\nAls ontwikkelaar\n\n\n\nOm de toolbox als vervanging van de huidige Continu Inzicht back-end te gebruiken, zal in de toekomst meer informatie beschikbaar gesteld worden. De oude back-end kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen die in de toolbox worden gedaan, kunnen dan worden meegenomen.\n\n\n\nOm de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht\n\n\n\nZie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Installeren",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#vervanging",
    "href": "install.html#vervanging",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Om de toolbox als vervanging van de huidige Continu Inzicht back-end te gebruiken, zal in de toekomst meer informatie beschikbaar gesteld worden. De oude back-end kan met weinig aanpassingen worden vervangen door de nieuwe code. Verdere aanpassingen die in de toolbox worden gedaan, kunnen dan worden meegenomen.",
    "crumbs": [
      "Installeren",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#losstaande-modules",
    "href": "install.html#losstaande-modules",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Om de toolbox als losstaande modules te gebruiken kan je de code downloaden van PyPi.\npip install toolbox_continu_inzicht",
    "crumbs": [
      "Installeren",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "install.html#als-ontwikkelaar",
    "href": "install.html#als-ontwikkelaar",
    "title": "Installatie-instructies",
    "section": "",
    "text": "Zie het document CONTRIBUTING.md voor meer informatie.",
    "crumbs": [
      "Installeren",
      "Installatie-instructies"
    ]
  },
  {
    "objectID": "reference/loads.LoadsMatroos.html",
    "href": "reference/loads.LoadsMatroos.html",
    "title": "loads.LoadsMatroos",
    "section": "",
    "text": "loads.LoadsMatroos()\nDe LoadsMatroos klasse haalt belastinggegevens op van de Rijkswaterstaat Waterwebservices.\nArgs: data_adapter: DataAdapter De data adapter voor het ophalen en opslaan van gegevens. df_in: Optional[pd.DataFrame] | None = None Het invoerdataframe. df_out: Optional[pd.DataFrame] | None = None Het uitvoerdataframe.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl_retrieve_series_matroos\nstr(object=’’) -&gt; str\n\n\nurl_retrieve_series_noos\nstr(object=’’) -&gt; str\n\n\nurl_retrieve_series_vitaal\nstr(object=’’) -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\nformat_location_names\nNeemt een lijst met locatienamen en verwijdert spaties en maakt ze allemaal in kleine letters\n\n\ngenerate_url\nGeeft de benodigde URL terug om het verzoek naar de Noos-server te maken\n\n\nrun\nVoert de functie uit om gegevens op te halen en te verwerken voor de matroos-toolbox.\n\n\n\n\n\nloads.LoadsMatroos.create_dataframe(options, df_in, calc_time, json_data)\nMaakt een dataframe met waardes van de rws water webservices\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptions\ndict\nEen dictionary met opties uit de config\nrequired\n\n\ncalc_time\ndatetime\nDe huidige tijd\nrequired\n\n\njson_data\nlist\nEen lijst met JSON data\nrequired\n\n\n\n\n\n\npd.Dataframe\n    Pandas dataframe geschikt voor uitvoer\n\n\n\n\nloads.LoadsMatroos.format_location_names(location_names)\nNeemt een lijst met locatienamen en verwijdert spaties en maakt ze allemaal in kleine letters\n\n\n\nloads.LoadsMatroos.generate_url(calc_time, options, global_variables, parameter, location_names)\nGeeft de benodigde URL terug om het verzoek naar de Noos-server te maken\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncalc_time\n\nHuidige tijd, wordt gebruikt om de meest recente voorspelling op te halen\nrequired\n\n\noptions\n\nOpties die door de gebruiker zijn opgegeven, in dit geval is ‘source’ het belangrijkst\nrequired\n\n\nglobal_variables\n\nGlobale variabelen die nodig zijn om de URL te genereren\nrequired\n\n\nparameter\n\nEenheid van de parameter waarvoor gegevens worden opgehaald\nrequired\n\n\nlocation_names\n\nLijst van locatienamen waarvoor gegevens worden opgehaald\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nDe gegenereerde URL voor het verzoek aan de Noos-server\n\n\n\n\n\n\n\nloads.LoadsMatroos.run(input, output)\nVoert de functie uit om gegevens op te halen en te verwerken voor de matroos-toolbox.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nstr\nNaam van de dataadapter met invoergegevens.\nrequired\n\n\noutput\nstr\nNaam van de dataadapter om uitvoergegevens op te slaan.\nrequired"
  },
  {
    "objectID": "reference/loads.LoadsMatroos.html#attributes",
    "href": "reference/loads.LoadsMatroos.html#attributes",
    "title": "loads.LoadsMatroos",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\nurl_retrieve_series_matroos\nstr(object=’’) -&gt; str\n\n\nurl_retrieve_series_noos\nstr(object=’’) -&gt; str\n\n\nurl_retrieve_series_vitaal\nstr(object=’’) -&gt; str"
  },
  {
    "objectID": "reference/loads.LoadsMatroos.html#methods",
    "href": "reference/loads.LoadsMatroos.html#methods",
    "title": "loads.LoadsMatroos",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_dataframe\nMaakt een dataframe met waardes van de rws water webservices\n\n\nformat_location_names\nNeemt een lijst met locatienamen en verwijdert spaties en maakt ze allemaal in kleine letters\n\n\ngenerate_url\nGeeft de benodigde URL terug om het verzoek naar de Noos-server te maken\n\n\nrun\nVoert de functie uit om gegevens op te halen en te verwerken voor de matroos-toolbox.\n\n\n\n\n\nloads.LoadsMatroos.create_dataframe(options, df_in, calc_time, json_data)\nMaakt een dataframe met waardes van de rws water webservices\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noptions\ndict\nEen dictionary met opties uit de config\nrequired\n\n\ncalc_time\ndatetime\nDe huidige tijd\nrequired\n\n\njson_data\nlist\nEen lijst met JSON data\nrequired\n\n\n\n\n\n\npd.Dataframe\n    Pandas dataframe geschikt voor uitvoer\n\n\n\n\nloads.LoadsMatroos.format_location_names(location_names)\nNeemt een lijst met locatienamen en verwijdert spaties en maakt ze allemaal in kleine letters\n\n\n\nloads.LoadsMatroos.generate_url(calc_time, options, global_variables, parameter, location_names)\nGeeft de benodigde URL terug om het verzoek naar de Noos-server te maken\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncalc_time\n\nHuidige tijd, wordt gebruikt om de meest recente voorspelling op te halen\nrequired\n\n\noptions\n\nOpties die door de gebruiker zijn opgegeven, in dit geval is ‘source’ het belangrijkst\nrequired\n\n\nglobal_variables\n\nGlobale variabelen die nodig zijn om de URL te genereren\nrequired\n\n\nparameter\n\nEenheid van de parameter waarvoor gegevens worden opgehaald\nrequired\n\n\nlocation_names\n\nLijst van locatienamen waarvoor gegevens worden opgehaald\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nDe gegenereerde URL voor het verzoek aan de Noos-server\n\n\n\n\n\n\n\nloads.LoadsMatroos.run(input, output)\nVoert de functie uit om gegevens op te halen en te verwerken voor de matroos-toolbox.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput\nstr\nNaam van de dataadapter met invoergegevens.\nrequired\n\n\noutput\nstr\nNaam van de dataadapter om uitvoergegevens op te slaan.\nrequired"
  },
  {
    "objectID": "reference/config.html",
    "href": "reference/config.html",
    "title": "config",
    "section": "",
    "text": "config\nconfig"
  },
  {
    "objectID": "reference/loads.LoadsFews.html",
    "href": "reference/loads.LoadsFews.html",
    "title": "loads.LoadsFews",
    "section": "",
    "text": "loads.LoadsFews()\nMet deze functie wordt er bij de opgegeven FEWS omgeving via REST gegevens opgehaald.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput_schema\ndict() -&gt; new empty dictionary\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe\n\n\ncreate_params\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\ncreate_url\nMaak een rest url voor FEWS\n\n\nrun\nDe runner van de Loads Fews.\n\n\n\n\n\nloads.LoadsFews.create_dataframe(options, calc_time, json_data, locations)\nMaak een pandas dataframe\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer definition: - Meetlocatie id (measurement_location_id) - Meetlocatie code (measurement_location_code) - Meetlocatie omschrijving/naam (measurement_location_description) - Parameter id overeenkomstig Aquo-standaard: ‘4724’ (parameter_id) - Parameter code overeenkomstig Aquo-standaard: ‘WATHTE’ (parameter_code) - Parameter omschrijving overeenkomstig Aquo-standaard: ‘Waterhoogte’ (parameter_description) - Eenheid (unit) - Datum en tijd (date_time) - Waarde (value) - Type waarde: meting of verwachting (value_type)\n\n\n\nloads.LoadsFews.create_params(calc_time, options, moments, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: calc_time (datetime): T0 in UTC options (type): options uit de invoer yaml\nReturns: dict: lijst met parameters\n\n\n\nloads.LoadsFews.create_url(options)\nMaak een rest url voor FEWS\nArgs: options (type): Options uit de invoer yaml\nReturns: str: URL\n\n\n\nloads.LoadsFews.run(input, output)\nDe runner van de Loads Fews.\nArgs:\nReturns: Dataframe: Pandas dataframe met opgehaalde gegevens uit FEWS."
  },
  {
    "objectID": "reference/loads.LoadsFews.html#attributes",
    "href": "reference/loads.LoadsFews.html#attributes",
    "title": "loads.LoadsFews",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\ninput_schema\ndict() -&gt; new empty dictionary"
  },
  {
    "objectID": "reference/loads.LoadsFews.html#methods",
    "href": "reference/loads.LoadsFews.html#methods",
    "title": "loads.LoadsFews",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_dataframe\nMaak een pandas dataframe\n\n\ncreate_params\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\n\n\ncreate_url\nMaak een rest url voor FEWS\n\n\nrun\nDe runner van de Loads Fews.\n\n\n\n\n\nloads.LoadsFews.create_dataframe(options, calc_time, json_data, locations)\nMaak een pandas dataframe\nArgs: json_data (str): JSON data\nReturns: Dataframe: Pandas dataframe geschikt voor uitvoer definition: - Meetlocatie id (measurement_location_id) - Meetlocatie code (measurement_location_code) - Meetlocatie omschrijving/naam (measurement_location_description) - Parameter id overeenkomstig Aquo-standaard: ‘4724’ (parameter_id) - Parameter code overeenkomstig Aquo-standaard: ‘WATHTE’ (parameter_code) - Parameter omschrijving overeenkomstig Aquo-standaard: ‘Waterhoogte’ (parameter_description) - Eenheid (unit) - Datum en tijd (date_time) - Waarde (value) - Type waarde: meting of verwachting (value_type)\n\n\n\nloads.LoadsFews.create_params(calc_time, options, moments, locations)\nMaak een lijst van FEWS parameters om mee te sturen bij het ophalen van data.\nArgs: calc_time (datetime): T0 in UTC options (type): options uit de invoer yaml\nReturns: dict: lijst met parameters\n\n\n\nloads.LoadsFews.create_url(options)\nMaak een rest url voor FEWS\nArgs: options (type): Options uit de invoer yaml\nReturns: str: URL\n\n\n\nloads.LoadsFews.run(input, output)\nDe runner van de Loads Fews.\nArgs:\nReturns: Dataframe: Pandas dataframe met opgehaalde gegevens uit FEWS."
  },
  {
    "objectID": "reference/loads.get_waterinfo_thresholds.html",
    "href": "reference/loads.get_waterinfo_thresholds.html",
    "title": "loads.get_waterinfo_thresholds",
    "section": "",
    "text": "loads.get_waterinfo_thresholds\nloads.get_waterinfo_thresholds(location_code, parameter_id='waterhoogte')\nHaal voor Waterinfo de thresholds op voor de opgegegeven parameter\nArgs: parameter_id (str): Waterinfo parameter bij geen waarde ‘waterhoogte’\nReturns: Dataframe: Pandas dataframe met thressholds"
  },
  {
    "objectID": "reference/loads.LoadsToMoments.html",
    "href": "reference/loads.LoadsToMoments.html",
    "title": "loads.LoadsToMoments",
    "section": "",
    "text": "loads.LoadsToMoments()\nMet deze klasse kunnen waterstandsgegevens worden omgezet naar bepaalde momenten. Deze klasse bevat een methode genaamd ‘run’ die de waterstandsgegevens verwerkt en de resulterende momenten opslaat in een dataframe.\nAttributes: data_adapter (DataAdapter): Een object van de klasse DataAdapter. df_in (Optional[pd.DataFrame] | None): Het invoerdataframe met waterstandsgegevens. Standaard is dit None. df_out (Optional[pd.DataFrame] | None): Het uitvoerdataframe met de resulterende momenten. Standaard is dit None. Methods: run(input: str, output: str): Verwerkt de waterstandsgegevens en slaat de resulterende momenten op in het uitvoerdataframe. get_moment_from_dataframe(moment, df_moments): Haalt het moment op uit het gegeven dataframe met waterstandsgegevens.\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_moment_from_dataframe\nHaalt het moment op uit een dataframe van momenten.\n\n\nrun\nVerwerkt de invoergegevens om momenten te berekenen en genereert het uitvoerdataframe.\n\n\n\n\n\nloads.LoadsToMoments.get_moment_from_dataframe(moment, df_moments)\nHaalt het moment op uit een dataframe van momenten. Parameters: - moment: Het moment dat moet worden opgehaald. - df_moments: Het dataframe van momenten. Returns: Het dataframe met het opgehaalde moment.\n\n\n\nloads.LoadsToMoments.run(input, output)\nVerwerkt de invoergegevens om momenten te berekenen en genereert het uitvoerdataframe.\nArgs: input (str): Naam van de dataadapter met invoergegevens. output (str): Naam van de dataadapter om uitvoergegevens op te slaan. Returns: None"
  },
  {
    "objectID": "reference/loads.LoadsToMoments.html#attributes",
    "href": "reference/loads.LoadsToMoments.html#attributes",
    "title": "loads.LoadsToMoments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out"
  },
  {
    "objectID": "reference/loads.LoadsToMoments.html#methods",
    "href": "reference/loads.LoadsToMoments.html#methods",
    "title": "loads.LoadsToMoments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_moment_from_dataframe\nHaalt het moment op uit een dataframe van momenten.\n\n\nrun\nVerwerkt de invoergegevens om momenten te berekenen en genereert het uitvoerdataframe.\n\n\n\n\n\nloads.LoadsToMoments.get_moment_from_dataframe(moment, df_moments)\nHaalt het moment op uit een dataframe van momenten. Parameters: - moment: Het moment dat moet worden opgehaald. - df_moments: Het dataframe van momenten. Returns: Het dataframe met het opgehaalde moment.\n\n\n\nloads.LoadsToMoments.run(input, output)\nVerwerkt de invoergegevens om momenten te berekenen en genereert het uitvoerdataframe.\nArgs: input (str): Naam van de dataadapter met invoergegevens. output (str): Naam van de dataadapter om uitvoergegevens op te slaan. Returns: None"
  },
  {
    "objectID": "reference/loads.LoadsCIWhatIf.html",
    "href": "reference/loads.LoadsCIWhatIf.html",
    "title": "loads.LoadsCIWhatIf",
    "section": "",
    "text": "loads.LoadsCIWhatIf()\nMet deze functie worden belasting opgehaald en weggeschreven\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nDe runner van de Loads Classify.\n\n\n\n\n\nloads.LoadsCIWhatIf.run(input, output=None)\nDe runner van de Loads Classify.\nArgs: input (str):\noutput (str):\nReturns: Dataframe: Pandas dataframe met …"
  },
  {
    "objectID": "reference/loads.LoadsCIWhatIf.html#attributes",
    "href": "reference/loads.LoadsCIWhatIf.html#attributes",
    "title": "loads.LoadsCIWhatIf",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in\n\n\n\ndf_out"
  },
  {
    "objectID": "reference/loads.LoadsCIWhatIf.html#methods",
    "href": "reference/loads.LoadsCIWhatIf.html#methods",
    "title": "loads.LoadsCIWhatIf",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrun\nDe runner van de Loads Classify.\n\n\n\n\n\nloads.LoadsCIWhatIf.run(input, output=None)\nDe runner van de Loads Classify.\nArgs: input (str):\noutput (str):\nReturns: Dataframe: Pandas dataframe met …"
  },
  {
    "objectID": "reference/loads.LoadsClassify.html",
    "href": "reference/loads.LoadsClassify.html",
    "title": "loads.LoadsClassify",
    "section": "",
    "text": "loads.LoadsClassify()\nMet deze functie worden de waterstanden met opgegeven grenzen geclassificeerd\n\n\n\n\n\nName\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in_loads\n\n\n\ndf_in_thresholds\n\n\n\ndf_out\n\n\n\ninput_schema_loads\ndict() -&gt; new empty dictionary\n\n\ninput_schema_thresholds\ndict() -&gt; new empty dictionary\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nDe runner van de Loads Classify.\n\n\n\n\n\nloads.LoadsClassify.run(input, output)\nDe runner van de Loads Classify.\nArgs: input List(str): [0] lijst met drempelwaarden per meetlocatie [1] belasting per moment per meetlocaties output (str): uitvoer sectie van het yaml-bestand: koppeling van de maatgevende meetlocaties per dijkvak\nReturns: Dataframe: Pandas dataframe met geclassificeerde waterstanden voor opgegeven momenten."
  },
  {
    "objectID": "reference/loads.LoadsClassify.html#attributes",
    "href": "reference/loads.LoadsClassify.html#attributes",
    "title": "loads.LoadsClassify",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndata_adapter\n\n\n\ndf_in_loads\n\n\n\ndf_in_thresholds\n\n\n\ndf_out\n\n\n\ninput_schema_loads\ndict() -&gt; new empty dictionary\n\n\ninput_schema_thresholds\ndict() -&gt; new empty dictionary"
  },
  {
    "objectID": "reference/loads.LoadsClassify.html#methods",
    "href": "reference/loads.LoadsClassify.html#methods",
    "title": "loads.LoadsClassify",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrun\nDe runner van de Loads Classify.\n\n\n\n\n\nloads.LoadsClassify.run(input, output)\nDe runner van de Loads Classify.\nArgs: input List(str): [0] lijst met drempelwaarden per meetlocatie [1] belasting per moment per meetlocaties output (str): uitvoer sectie van het yaml-bestand: koppeling van de maatgevende meetlocaties per dijkvak\nReturns: Dataframe: Pandas dataframe met geclassificeerde waterstanden voor opgegeven momenten."
  },
  {
    "objectID": "reference/loads.get_matroos_locations.html",
    "href": "reference/loads.get_matroos_locations.html",
    "title": "loads.get_matroos_locations",
    "section": "",
    "text": "loads.get_matroos_locations\nloads.get_matroos_locations(source=None, parameter=None)\nHaalt alle matroos locaties op, indien gewenst ook bron en parameter"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Voor meer informatie, vragen of opmerkingen over de Toolbox continu inzicht kunt u terecht bij:\nSTOWA: Oscar van Dam (vandam@stowa.nl)\nHKV: Marit Zethof (m.zethof@hkv.nl) en Bart Thonus (b.thonus@hkv.nl)",
    "crumbs": [
      "Overig",
      "Contact"
    ]
  }
]